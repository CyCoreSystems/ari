// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewAsteriskVariables creates a new instance of AsteriskVariables. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsteriskVariables(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsteriskVariables {
	mock := &AsteriskVariables{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AsteriskVariables is an autogenerated mock type for the AsteriskVariables type
type AsteriskVariables struct {
	mock.Mock
}

type AsteriskVariables_Expecter struct {
	mock *mock.Mock
}

func (_m *AsteriskVariables) EXPECT() *AsteriskVariables_Expecter {
	return &AsteriskVariables_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type AsteriskVariables
func (_mock *AsteriskVariables) Get(key *ari.Key) (string, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (string, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AsteriskVariables_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AsteriskVariables_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *AsteriskVariables_Expecter) Get(key interface{}) *AsteriskVariables_Get_Call {
	return &AsteriskVariables_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *AsteriskVariables_Get_Call) Run(run func(key *ari.Key)) *AsteriskVariables_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AsteriskVariables_Get_Call) Return(s string, err error) *AsteriskVariables_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AsteriskVariables_Get_Call) RunAndReturn(run func(key *ari.Key) (string, error)) *AsteriskVariables_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type AsteriskVariables
func (_mock *AsteriskVariables) Set(key *ari.Key, value string) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AsteriskVariables_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type AsteriskVariables_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key *ari.Key
//   - value string
func (_e *AsteriskVariables_Expecter) Set(key interface{}, value interface{}) *AsteriskVariables_Set_Call {
	return &AsteriskVariables_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *AsteriskVariables_Set_Call) Run(run func(key *ari.Key, value string)) *AsteriskVariables_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AsteriskVariables_Set_Call) Return(err error) *AsteriskVariables_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AsteriskVariables_Set_Call) RunAndReturn(run func(key *ari.Key, value string) error) *AsteriskVariables_Set_Call {
	_c.Call.Return(run)
	return _c
}
