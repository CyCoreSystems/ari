// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

type Event_Expecter struct {
	mock *mock.Mock
}

func (_m *Event) EXPECT() *Event_Expecter {
	return &Event_Expecter{mock: &_m.Mock}
}

// GetApplication provides a mock function for the type Event
func (_mock *Event) GetApplication() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Event_GetApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplication'
type Event_GetApplication_Call struct {
	*mock.Call
}

// GetApplication is a helper method to define mock.On call
func (_e *Event_Expecter) GetApplication() *Event_GetApplication_Call {
	return &Event_GetApplication_Call{Call: _e.mock.On("GetApplication")}
}

func (_c *Event_GetApplication_Call) Run(run func()) *Event_GetApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetApplication_Call) Return(s string) *Event_GetApplication_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Event_GetApplication_Call) RunAndReturn(run func() string) *Event_GetApplication_Call {
	_c.Call.Return(run)
	return _c
}

// GetDialog provides a mock function for the type Event
func (_mock *Event) GetDialog() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDialog")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Event_GetDialog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDialog'
type Event_GetDialog_Call struct {
	*mock.Call
}

// GetDialog is a helper method to define mock.On call
func (_e *Event_Expecter) GetDialog() *Event_GetDialog_Call {
	return &Event_GetDialog_Call{Call: _e.mock.On("GetDialog")}
}

func (_c *Event_GetDialog_Call) Run(run func()) *Event_GetDialog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetDialog_Call) Return(s string) *Event_GetDialog_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Event_GetDialog_Call) RunAndReturn(run func() string) *Event_GetDialog_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function for the type Event
func (_mock *Event) GetNode() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Event_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type Event_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
func (_e *Event_Expecter) GetNode() *Event_GetNode_Call {
	return &Event_GetNode_Call{Call: _e.mock.On("GetNode")}
}

func (_c *Event_GetNode_Call) Run(run func()) *Event_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetNode_Call) Return(s string) *Event_GetNode_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Event_GetNode_Call) RunAndReturn(run func() string) *Event_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function for the type Event
func (_mock *Event) GetType() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Event_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type Event_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *Event_Expecter) GetType() *Event_GetType_Call {
	return &Event_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *Event_GetType_Call) Run(run func()) *Event_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_GetType_Call) Return(s string) *Event_GetType_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Event_GetType_Call) RunAndReturn(run func() string) *Event_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function for the type Event
func (_mock *Event) Key(kind string, id string) *ari.Key {
	ret := _mock.Called(kind, id)

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 *ari.Key
	if returnFunc, ok := ret.Get(0).(func(string, string) *ari.Key); ok {
		r0 = returnFunc(kind, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.Key)
		}
	}
	return r0
}

// Event_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type Event_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
//   - kind string
//   - id string
func (_e *Event_Expecter) Key(kind interface{}, id interface{}) *Event_Key_Call {
	return &Event_Key_Call{Call: _e.mock.On("Key", kind, id)}
}

func (_c *Event_Key_Call) Run(run func(kind string, id string)) *Event_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Event_Key_Call) Return(key *ari.Key) *Event_Key_Call {
	_c.Call.Return(key)
	return _c
}

func (_c *Event_Key_Call) RunAndReturn(run func(kind string, id string) *ari.Key) *Event_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function for the type Event
func (_mock *Event) Keys() ari.Keys {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 ari.Keys
	if returnFunc, ok := ret.Get(0).(func() ari.Keys); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Keys)
		}
	}
	return r0
}

// Event_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type Event_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *Event_Expecter) Keys() *Event_Keys_Call {
	return &Event_Keys_Call{Call: _e.mock.On("Keys")}
}

func (_c *Event_Keys_Call) Run(run func()) *Event_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Event_Keys_Call) Return(keys ari.Keys) *Event_Keys_Call {
	_c.Call.Return(keys)
	return _c
}

func (_c *Event_Keys_Call) RunAndReturn(run func() ari.Keys) *Event_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// SetDialog provides a mock function for the type Event
func (_mock *Event) SetDialog(s string) {
	_mock.Called(s)
	return
}

// Event_SetDialog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDialog'
type Event_SetDialog_Call struct {
	*mock.Call
}

// SetDialog is a helper method to define mock.On call
//   - s string
func (_e *Event_Expecter) SetDialog(s interface{}) *Event_SetDialog_Call {
	return &Event_SetDialog_Call{Call: _e.mock.On("SetDialog", s)}
}

func (_c *Event_SetDialog_Call) Run(run func(s string)) *Event_SetDialog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Event_SetDialog_Call) Return() *Event_SetDialog_Call {
	_c.Call.Return()
	return _c
}

func (_c *Event_SetDialog_Call) RunAndReturn(run func(s string)) *Event_SetDialog_Call {
	_c.Run(run)
	return _c
}
