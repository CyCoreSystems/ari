// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

type Config_Expecter struct {
	mock *mock.Mock
}

func (_m *Config) EXPECT() *Config_Expecter {
	return &Config_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type Config
func (_mock *Config) Data(key *ari.Key) (*ari.ConfigData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.ConfigData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.ConfigData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.ConfigData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ConfigData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Config_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Config_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Config_Expecter) Data(key interface{}) *Config_Data_Call {
	return &Config_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Config_Data_Call) Run(run func(key *ari.Key)) *Config_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Config_Data_Call) Return(configData *ari.ConfigData, err error) *Config_Data_Call {
	_c.Call.Return(configData, err)
	return _c
}

func (_c *Config_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.ConfigData, error)) *Config_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type Config
func (_mock *Config) Delete(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Config_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Config_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Config_Expecter) Delete(key interface{}) *Config_Delete_Call {
	return &Config_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *Config_Delete_Call) Run(run func(key *ari.Key)) *Config_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Config_Delete_Call) Return(err error) *Config_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Config_Delete_Call) RunAndReturn(run func(key *ari.Key) error) *Config_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Config
func (_mock *Config) Get(key *ari.Key) *ari.ConfigHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.ConfigHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.ConfigHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ConfigHandle)
		}
	}
	return r0
}

// Config_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Config_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Config_Expecter) Get(key interface{}) *Config_Get_Call {
	return &Config_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Config_Get_Call) Run(run func(key *ari.Key)) *Config_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Config_Get_Call) Return(configHandle *ari.ConfigHandle) *Config_Get_Call {
	_c.Call.Return(configHandle)
	return _c
}

func (_c *Config_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.ConfigHandle) *Config_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type Config
func (_mock *Config) Update(key *ari.Key, tuples []ari.ConfigTuple) error {
	ret := _mock.Called(key, tuples)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, []ari.ConfigTuple) error); ok {
		r0 = returnFunc(key, tuples)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Config_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Config_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key *ari.Key
//   - tuples []ari.ConfigTuple
func (_e *Config_Expecter) Update(key interface{}, tuples interface{}) *Config_Update_Call {
	return &Config_Update_Call{Call: _e.mock.On("Update", key, tuples)}
}

func (_c *Config_Update_Call) Run(run func(key *ari.Key, tuples []ari.ConfigTuple)) *Config_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 []ari.ConfigTuple
		if args[1] != nil {
			arg1 = args[1].([]ari.ConfigTuple)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Config_Update_Call) Return(err error) *Config_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Config_Update_Call) RunAndReturn(run func(key *ari.Key, tuples []ari.ConfigTuple) error) *Config_Update_Call {
	_c.Call.Return(run)
	return _c
}
