// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewStoredRecording creates a new instance of StoredRecording. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoredRecording(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoredRecording {
	mock := &StoredRecording{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StoredRecording is an autogenerated mock type for the StoredRecording type
type StoredRecording struct {
	mock.Mock
}

type StoredRecording_Expecter struct {
	mock *mock.Mock
}

func (_m *StoredRecording) EXPECT() *StoredRecording_Expecter {
	return &StoredRecording_Expecter{mock: &_m.Mock}
}

// Copy provides a mock function for the type StoredRecording
func (_mock *StoredRecording) Copy(key *ari.Key, dest string) (*ari.StoredRecordingHandle, error) {
	ret := _mock.Called(key, dest)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 *ari.StoredRecordingHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) (*ari.StoredRecordingHandle, error)); ok {
		return returnFunc(key, dest)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) *ari.StoredRecordingHandle); ok {
		r0 = returnFunc(key, dest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.StoredRecordingHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string) error); ok {
		r1 = returnFunc(key, dest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StoredRecording_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type StoredRecording_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - key *ari.Key
//   - dest string
func (_e *StoredRecording_Expecter) Copy(key interface{}, dest interface{}) *StoredRecording_Copy_Call {
	return &StoredRecording_Copy_Call{Call: _e.mock.On("Copy", key, dest)}
}

func (_c *StoredRecording_Copy_Call) Run(run func(key *ari.Key, dest string)) *StoredRecording_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *StoredRecording_Copy_Call) Return(storedRecordingHandle *ari.StoredRecordingHandle, err error) *StoredRecording_Copy_Call {
	_c.Call.Return(storedRecordingHandle, err)
	return _c
}

func (_c *StoredRecording_Copy_Call) RunAndReturn(run func(key *ari.Key, dest string) (*ari.StoredRecordingHandle, error)) *StoredRecording_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function for the type StoredRecording
func (_mock *StoredRecording) Data(key *ari.Key) (*ari.StoredRecordingData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.StoredRecordingData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.StoredRecordingData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.StoredRecordingData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.StoredRecordingData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StoredRecording_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type StoredRecording_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *StoredRecording_Expecter) Data(key interface{}) *StoredRecording_Data_Call {
	return &StoredRecording_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *StoredRecording_Data_Call) Run(run func(key *ari.Key)) *StoredRecording_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StoredRecording_Data_Call) Return(storedRecordingData *ari.StoredRecordingData, err error) *StoredRecording_Data_Call {
	_c.Call.Return(storedRecordingData, err)
	return _c
}

func (_c *StoredRecording_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.StoredRecordingData, error)) *StoredRecording_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type StoredRecording
func (_mock *StoredRecording) Delete(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StoredRecording_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type StoredRecording_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key *ari.Key
func (_e *StoredRecording_Expecter) Delete(key interface{}) *StoredRecording_Delete_Call {
	return &StoredRecording_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *StoredRecording_Delete_Call) Run(run func(key *ari.Key)) *StoredRecording_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StoredRecording_Delete_Call) Return(err error) *StoredRecording_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StoredRecording_Delete_Call) RunAndReturn(run func(key *ari.Key) error) *StoredRecording_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type StoredRecording
func (_mock *StoredRecording) Get(key *ari.Key) *ari.StoredRecordingHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.StoredRecordingHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.StoredRecordingHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.StoredRecordingHandle)
		}
	}
	return r0
}

// StoredRecording_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type StoredRecording_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *StoredRecording_Expecter) Get(key interface{}) *StoredRecording_Get_Call {
	return &StoredRecording_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *StoredRecording_Get_Call) Run(run func(key *ari.Key)) *StoredRecording_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StoredRecording_Get_Call) Return(storedRecordingHandle *ari.StoredRecordingHandle) *StoredRecording_Get_Call {
	_c.Call.Return(storedRecordingHandle)
	return _c
}

func (_c *StoredRecording_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.StoredRecordingHandle) *StoredRecording_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type StoredRecording
func (_mock *StoredRecording) List(filter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StoredRecording_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type StoredRecording_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter *ari.Key
func (_e *StoredRecording_Expecter) List(filter interface{}) *StoredRecording_List_Call {
	return &StoredRecording_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *StoredRecording_List_Call) Run(run func(filter *ari.Key)) *StoredRecording_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *StoredRecording_List_Call) Return(keys []*ari.Key, err error) *StoredRecording_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *StoredRecording_List_Call) RunAndReturn(run func(filter *ari.Key) ([]*ari.Key, error)) *StoredRecording_List_Call {
	_c.Call.Return(run)
	return _c
}
