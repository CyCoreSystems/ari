// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewPlayer creates a new instance of Player. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Player {
	mock := &Player{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Player is an autogenerated mock type for the Player type
type Player struct {
	mock.Mock
}

type Player_Expecter struct {
	mock *mock.Mock
}

func (_m *Player) EXPECT() *Player_Expecter {
	return &Player_Expecter{mock: &_m.Mock}
}

// Play provides a mock function for the type Player
func (_mock *Player) Play(s string, strings ...string) (*ari.PlaybackHandle, error) {
	// string
	_va := make([]interface{}, len(strings))
	for _i := range strings {
		_va[_i] = strings[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Play")
	}

	var r0 *ari.PlaybackHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) (*ari.PlaybackHandle, error)); ok {
		return returnFunc(s, strings...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) *ari.PlaybackHandle); ok {
		r0 = returnFunc(s, strings...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.PlaybackHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(s, strings...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Player_Play_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Play'
type Player_Play_Call struct {
	*mock.Call
}

// Play is a helper method to define mock.On call
//   - s string
//   - strings ...string
func (_e *Player_Expecter) Play(s interface{}, strings ...interface{}) *Player_Play_Call {
	return &Player_Play_Call{Call: _e.mock.On("Play",
		append([]interface{}{s}, strings...)...)}
}

func (_c *Player_Play_Call) Run(run func(s string, strings ...string)) *Player_Play_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Player_Play_Call) Return(playbackHandle *ari.PlaybackHandle, err error) *Player_Play_Call {
	_c.Call.Return(playbackHandle, err)
	return _c
}

func (_c *Player_Play_Call) RunAndReturn(run func(s string, strings ...string) (*ari.PlaybackHandle, error)) *Player_Play_Call {
	_c.Call.Return(run)
	return _c
}

// StagePlay provides a mock function for the type Player
func (_mock *Player) StagePlay(s string, strings ...string) (*ari.PlaybackHandle, error) {
	// string
	_va := make([]interface{}, len(strings))
	for _i := range strings {
		_va[_i] = strings[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StagePlay")
	}

	var r0 *ari.PlaybackHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) (*ari.PlaybackHandle, error)); ok {
		return returnFunc(s, strings...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) *ari.PlaybackHandle); ok {
		r0 = returnFunc(s, strings...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.PlaybackHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(s, strings...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Player_StagePlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StagePlay'
type Player_StagePlay_Call struct {
	*mock.Call
}

// StagePlay is a helper method to define mock.On call
//   - s string
//   - strings ...string
func (_e *Player_Expecter) StagePlay(s interface{}, strings ...interface{}) *Player_StagePlay_Call {
	return &Player_StagePlay_Call{Call: _e.mock.On("StagePlay",
		append([]interface{}{s}, strings...)...)}
}

func (_c *Player_StagePlay_Call) Run(run func(s string, strings ...string)) *Player_StagePlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Player_StagePlay_Call) Return(playbackHandle *ari.PlaybackHandle, err error) *Player_StagePlay_Call {
	_c.Call.Return(playbackHandle, err)
	return _c
}

func (_c *Player_StagePlay_Call) RunAndReturn(run func(s string, strings ...string) (*ari.PlaybackHandle, error)) *Player_StagePlay_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type Player
func (_mock *Player) Subscribe(n ...string) ari.Subscription {
	// string
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 ari.Subscription
	if returnFunc, ok := ret.Get(0).(func(...string) ari.Subscription); ok {
		r0 = returnFunc(n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}
	return r0
}

// Player_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Player_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - n ...string
func (_e *Player_Expecter) Subscribe(n ...interface{}) *Player_Subscribe_Call {
	return &Player_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{}, n...)...)}
}

func (_c *Player_Subscribe_Call) Run(run func(n ...string)) *Player_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Player_Subscribe_Call) Return(subscription ari.Subscription) *Player_Subscribe_Call {
	_c.Call.Return(subscription)
	return _c
}

func (_c *Player_Subscribe_Call) RunAndReturn(run func(n ...string) ari.Subscription) *Player_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
