// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewDeviceState creates a new instance of DeviceState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceState(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceState {
	mock := &DeviceState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DeviceState is an autogenerated mock type for the DeviceState type
type DeviceState struct {
	mock.Mock
}

type DeviceState_Expecter struct {
	mock *mock.Mock
}

func (_m *DeviceState) EXPECT() *DeviceState_Expecter {
	return &DeviceState_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type DeviceState
func (_mock *DeviceState) Data(key *ari.Key) (*ari.DeviceStateData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.DeviceStateData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.DeviceStateData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.DeviceStateData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.DeviceStateData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DeviceState_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type DeviceState_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *DeviceState_Expecter) Data(key interface{}) *DeviceState_Data_Call {
	return &DeviceState_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *DeviceState_Data_Call) Run(run func(key *ari.Key)) *DeviceState_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DeviceState_Data_Call) Return(deviceStateData *ari.DeviceStateData, err error) *DeviceState_Data_Call {
	_c.Call.Return(deviceStateData, err)
	return _c
}

func (_c *DeviceState_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.DeviceStateData, error)) *DeviceState_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type DeviceState
func (_mock *DeviceState) Delete(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DeviceState_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DeviceState_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key *ari.Key
func (_e *DeviceState_Expecter) Delete(key interface{}) *DeviceState_Delete_Call {
	return &DeviceState_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *DeviceState_Delete_Call) Run(run func(key *ari.Key)) *DeviceState_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DeviceState_Delete_Call) Return(err error) *DeviceState_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DeviceState_Delete_Call) RunAndReturn(run func(key *ari.Key) error) *DeviceState_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type DeviceState
func (_mock *DeviceState) Get(key *ari.Key) *ari.DeviceStateHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.DeviceStateHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.DeviceStateHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.DeviceStateHandle)
		}
	}
	return r0
}

// DeviceState_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DeviceState_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *DeviceState_Expecter) Get(key interface{}) *DeviceState_Get_Call {
	return &DeviceState_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *DeviceState_Get_Call) Run(run func(key *ari.Key)) *DeviceState_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DeviceState_Get_Call) Return(deviceStateHandle *ari.DeviceStateHandle) *DeviceState_Get_Call {
	_c.Call.Return(deviceStateHandle)
	return _c
}

func (_c *DeviceState_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.DeviceStateHandle) *DeviceState_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type DeviceState
func (_mock *DeviceState) List(filter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DeviceState_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DeviceState_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter *ari.Key
func (_e *DeviceState_Expecter) List(filter interface{}) *DeviceState_List_Call {
	return &DeviceState_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *DeviceState_List_Call) Run(run func(filter *ari.Key)) *DeviceState_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DeviceState_List_Call) Return(keys []*ari.Key, err error) *DeviceState_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *DeviceState_List_Call) RunAndReturn(run func(filter *ari.Key) ([]*ari.Key, error)) *DeviceState_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type DeviceState
func (_mock *DeviceState) Update(key *ari.Key, state string) error {
	ret := _mock.Called(key, state)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DeviceState_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type DeviceState_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key *ari.Key
//   - state string
func (_e *DeviceState_Expecter) Update(key interface{}, state interface{}) *DeviceState_Update_Call {
	return &DeviceState_Update_Call{Call: _e.mock.On("Update", key, state)}
}

func (_c *DeviceState_Update_Call) Run(run func(key *ari.Key, state string)) *DeviceState_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DeviceState_Update_Call) Return(err error) *DeviceState_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DeviceState_Update_Call) RunAndReturn(run func(key *ari.Key, state string) error) *DeviceState_Update_Call {
	_c.Call.Return(run)
	return _c
}
