// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewBus creates a new instance of Bus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bus {
	mock := &Bus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Bus is an autogenerated mock type for the Bus type
type Bus struct {
	mock.Mock
}

type Bus_Expecter struct {
	mock *mock.Mock
}

func (_m *Bus) EXPECT() *Bus_Expecter {
	return &Bus_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type Bus
func (_mock *Bus) Close() {
	_mock.Called()
	return
}

// Bus_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Bus_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Bus_Expecter) Close() *Bus_Close_Call {
	return &Bus_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Bus_Close_Call) Run(run func()) *Bus_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Bus_Close_Call) Return() *Bus_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Bus_Close_Call) RunAndReturn(run func()) *Bus_Close_Call {
	_c.Run(run)
	return _c
}

// Send provides a mock function for the type Bus
func (_mock *Bus) Send(e ari.Event) {
	_mock.Called(e)
	return
}

// Bus_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Bus_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - e ari.Event
func (_e *Bus_Expecter) Send(e interface{}) *Bus_Send_Call {
	return &Bus_Send_Call{Call: _e.mock.On("Send", e)}
}

func (_c *Bus_Send_Call) Run(run func(e ari.Event)) *Bus_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ari.Event
		if args[0] != nil {
			arg0 = args[0].(ari.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Bus_Send_Call) Return() *Bus_Send_Call {
	_c.Call.Return()
	return _c
}

func (_c *Bus_Send_Call) RunAndReturn(run func(e ari.Event)) *Bus_Send_Call {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function for the type Bus
func (_mock *Bus) Subscribe(key *ari.Key, n ...string) ari.Subscription {
	// string
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 ari.Subscription
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, ...string) ari.Subscription); ok {
		r0 = returnFunc(key, n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}
	return r0
}

// Bus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Bus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - key *ari.Key
//   - n ...string
func (_e *Bus_Expecter) Subscribe(key interface{}, n ...interface{}) *Bus_Subscribe_Call {
	return &Bus_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{key}, n...)...)}
}

func (_c *Bus_Subscribe_Call) Run(run func(key *ari.Key, n ...string)) *Bus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 []string
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Bus_Subscribe_Call) Return(subscription ari.Subscription) *Bus_Subscribe_Call {
	_c.Call.Return(subscription)
	return _c
}

func (_c *Bus_Subscribe_Call) RunAndReturn(run func(key *ari.Key, n ...string) ari.Subscription) *Bus_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
