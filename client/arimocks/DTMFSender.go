// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewDTMFSender creates a new instance of DTMFSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDTMFSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *DTMFSender {
	mock := &DTMFSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DTMFSender is an autogenerated mock type for the DTMFSender type
type DTMFSender struct {
	mock.Mock
}

type DTMFSender_Expecter struct {
	mock *mock.Mock
}

func (_m *DTMFSender) EXPECT() *DTMFSender_Expecter {
	return &DTMFSender_Expecter{mock: &_m.Mock}
}

// SendDTMF provides a mock function for the type DTMFSender
func (_mock *DTMFSender) SendDTMF(dtmf string, opts *ari.DTMFOptions) {
	_mock.Called(dtmf, opts)
	return
}

// DTMFSender_SendDTMF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDTMF'
type DTMFSender_SendDTMF_Call struct {
	*mock.Call
}

// SendDTMF is a helper method to define mock.On call
//   - dtmf string
//   - opts *ari.DTMFOptions
func (_e *DTMFSender_Expecter) SendDTMF(dtmf interface{}, opts interface{}) *DTMFSender_SendDTMF_Call {
	return &DTMFSender_SendDTMF_Call{Call: _e.mock.On("SendDTMF", dtmf, opts)}
}

func (_c *DTMFSender_SendDTMF_Call) Run(run func(dtmf string, opts *ari.DTMFOptions)) *DTMFSender_SendDTMF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *ari.DTMFOptions
		if args[1] != nil {
			arg1 = args[1].(*ari.DTMFOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DTMFSender_SendDTMF_Call) Return() *DTMFSender_SendDTMF_Call {
	_c.Call.Return()
	return _c
}

func (_c *DTMFSender_SendDTMF_Call) RunAndReturn(run func(dtmf string, opts *ari.DTMFOptions)) *DTMFSender_SendDTMF_Call {
	_c.Run(run)
	return _c
}
