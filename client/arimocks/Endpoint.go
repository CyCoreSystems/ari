// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewEndpoint creates a new instance of Endpoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEndpoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *Endpoint {
	mock := &Endpoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Endpoint is an autogenerated mock type for the Endpoint type
type Endpoint struct {
	mock.Mock
}

type Endpoint_Expecter struct {
	mock *mock.Mock
}

func (_m *Endpoint) EXPECT() *Endpoint_Expecter {
	return &Endpoint_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type Endpoint
func (_mock *Endpoint) Data(key *ari.Key) (*ari.EndpointData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.EndpointData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.EndpointData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.EndpointData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.EndpointData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Endpoint_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Endpoint_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Endpoint_Expecter) Data(key interface{}) *Endpoint_Data_Call {
	return &Endpoint_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Endpoint_Data_Call) Run(run func(key *ari.Key)) *Endpoint_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Endpoint_Data_Call) Return(endpointData *ari.EndpointData, err error) *Endpoint_Data_Call {
	_c.Call.Return(endpointData, err)
	return _c
}

func (_c *Endpoint_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.EndpointData, error)) *Endpoint_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Endpoint
func (_mock *Endpoint) Get(key *ari.Key) *ari.EndpointHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.EndpointHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.EndpointHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.EndpointHandle)
		}
	}
	return r0
}

// Endpoint_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Endpoint_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Endpoint_Expecter) Get(key interface{}) *Endpoint_Get_Call {
	return &Endpoint_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Endpoint_Get_Call) Run(run func(key *ari.Key)) *Endpoint_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Endpoint_Get_Call) Return(endpointHandle *ari.EndpointHandle) *Endpoint_Get_Call {
	_c.Call.Return(endpointHandle)
	return _c
}

func (_c *Endpoint_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.EndpointHandle) *Endpoint_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Endpoint
func (_mock *Endpoint) List(filter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Endpoint_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Endpoint_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter *ari.Key
func (_e *Endpoint_Expecter) List(filter interface{}) *Endpoint_List_Call {
	return &Endpoint_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *Endpoint_List_Call) Run(run func(filter *ari.Key)) *Endpoint_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Endpoint_List_Call) Return(keys []*ari.Key, err error) *Endpoint_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Endpoint_List_Call) RunAndReturn(run func(filter *ari.Key) ([]*ari.Key, error)) *Endpoint_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByTech provides a mock function for the type Endpoint
func (_mock *Endpoint) ListByTech(tech string, filter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(tech, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListByTech")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(tech, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *ari.Key) []*ari.Key); ok {
		r0 = returnFunc(tech, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *ari.Key) error); ok {
		r1 = returnFunc(tech, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Endpoint_ListByTech_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByTech'
type Endpoint_ListByTech_Call struct {
	*mock.Call
}

// ListByTech is a helper method to define mock.On call
//   - tech string
//   - filter *ari.Key
func (_e *Endpoint_Expecter) ListByTech(tech interface{}, filter interface{}) *Endpoint_ListByTech_Call {
	return &Endpoint_ListByTech_Call{Call: _e.mock.On("ListByTech", tech, filter)}
}

func (_c *Endpoint_ListByTech_Call) Run(run func(tech string, filter *ari.Key)) *Endpoint_ListByTech_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *ari.Key
		if args[1] != nil {
			arg1 = args[1].(*ari.Key)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Endpoint_ListByTech_Call) Return(keys []*ari.Key, err error) *Endpoint_ListByTech_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Endpoint_ListByTech_Call) RunAndReturn(run func(tech string, filter *ari.Key) ([]*ari.Key, error)) *Endpoint_ListByTech_Call {
	_c.Call.Return(run)
	return _c
}
