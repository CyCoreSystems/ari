// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewSubscription creates a new instance of Subscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscription {
	mock := &Subscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Subscription is an autogenerated mock type for the Subscription type
type Subscription struct {
	mock.Mock
}

type Subscription_Expecter struct {
	mock *mock.Mock
}

func (_m *Subscription) EXPECT() *Subscription_Expecter {
	return &Subscription_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function for the type Subscription
func (_mock *Subscription) Cancel() {
	_mock.Called()
	return
}

// Subscription_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type Subscription_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
func (_e *Subscription_Expecter) Cancel() *Subscription_Cancel_Call {
	return &Subscription_Cancel_Call{Call: _e.mock.On("Cancel")}
}

func (_c *Subscription_Cancel_Call) Run(run func()) *Subscription_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Subscription_Cancel_Call) Return() *Subscription_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *Subscription_Cancel_Call) RunAndReturn(run func()) *Subscription_Cancel_Call {
	_c.Run(run)
	return _c
}

// Events provides a mock function for the type Subscription
func (_mock *Subscription) Events() <-chan ari.Event {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 <-chan ari.Event
	if returnFunc, ok := ret.Get(0).(func() <-chan ari.Event); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan ari.Event)
		}
	}
	return r0
}

// Subscription_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type Subscription_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *Subscription_Expecter) Events() *Subscription_Events_Call {
	return &Subscription_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *Subscription_Events_Call) Run(run func()) *Subscription_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Subscription_Events_Call) Return(eventCh <-chan ari.Event) *Subscription_Events_Call {
	_c.Call.Return(eventCh)
	return _c
}

func (_c *Subscription_Events_Call) RunAndReturn(run func() <-chan ari.Event) *Subscription_Events_Call {
	_c.Call.Return(run)
	return _c
}
