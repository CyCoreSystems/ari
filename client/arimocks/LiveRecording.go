// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewLiveRecording creates a new instance of LiveRecording. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLiveRecording(t interface {
	mock.TestingT
	Cleanup(func())
}) *LiveRecording {
	mock := &LiveRecording{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LiveRecording is an autogenerated mock type for the LiveRecording type
type LiveRecording struct {
	mock.Mock
}

type LiveRecording_Expecter struct {
	mock *mock.Mock
}

func (_m *LiveRecording) EXPECT() *LiveRecording_Expecter {
	return &LiveRecording_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Data(key *ari.Key) (*ari.LiveRecordingData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.LiveRecordingData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.LiveRecordingData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.LiveRecordingData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LiveRecordingData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LiveRecording_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type LiveRecording_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Data(key interface{}) *LiveRecording_Data_Call {
	return &LiveRecording_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *LiveRecording_Data_Call) Run(run func(key *ari.Key)) *LiveRecording_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Data_Call) Return(liveRecordingData *ari.LiveRecordingData, err error) *LiveRecording_Data_Call {
	_c.Call.Return(liveRecordingData, err)
	return _c
}

func (_c *LiveRecording_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.LiveRecordingData, error)) *LiveRecording_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Get(key *ari.Key) *ari.LiveRecordingHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.LiveRecordingHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.LiveRecordingHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LiveRecordingHandle)
		}
	}
	return r0
}

// LiveRecording_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type LiveRecording_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Get(key interface{}) *LiveRecording_Get_Call {
	return &LiveRecording_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *LiveRecording_Get_Call) Run(run func(key *ari.Key)) *LiveRecording_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Get_Call) Return(liveRecordingHandle *ari.LiveRecordingHandle) *LiveRecording_Get_Call {
	_c.Call.Return(liveRecordingHandle)
	return _c
}

func (_c *LiveRecording_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.LiveRecordingHandle) *LiveRecording_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Mute provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Mute(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Mute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveRecording_Mute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mute'
type LiveRecording_Mute_Call struct {
	*mock.Call
}

// Mute is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Mute(key interface{}) *LiveRecording_Mute_Call {
	return &LiveRecording_Mute_Call{Call: _e.mock.On("Mute", key)}
}

func (_c *LiveRecording_Mute_Call) Run(run func(key *ari.Key)) *LiveRecording_Mute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Mute_Call) Return(err error) *LiveRecording_Mute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveRecording_Mute_Call) RunAndReturn(run func(key *ari.Key) error) *LiveRecording_Mute_Call {
	_c.Call.Return(run)
	return _c
}

// Pause provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Pause(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Pause")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveRecording_Pause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pause'
type LiveRecording_Pause_Call struct {
	*mock.Call
}

// Pause is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Pause(key interface{}) *LiveRecording_Pause_Call {
	return &LiveRecording_Pause_Call{Call: _e.mock.On("Pause", key)}
}

func (_c *LiveRecording_Pause_Call) Run(run func(key *ari.Key)) *LiveRecording_Pause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Pause_Call) Return(err error) *LiveRecording_Pause_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveRecording_Pause_Call) RunAndReturn(run func(key *ari.Key) error) *LiveRecording_Pause_Call {
	_c.Call.Return(run)
	return _c
}

// Resume provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Resume(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveRecording_Resume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resume'
type LiveRecording_Resume_Call struct {
	*mock.Call
}

// Resume is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Resume(key interface{}) *LiveRecording_Resume_Call {
	return &LiveRecording_Resume_Call{Call: _e.mock.On("Resume", key)}
}

func (_c *LiveRecording_Resume_Call) Run(run func(key *ari.Key)) *LiveRecording_Resume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Resume_Call) Return(err error) *LiveRecording_Resume_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveRecording_Resume_Call) RunAndReturn(run func(key *ari.Key) error) *LiveRecording_Resume_Call {
	_c.Call.Return(run)
	return _c
}

// Scrap provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Scrap(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Scrap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveRecording_Scrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scrap'
type LiveRecording_Scrap_Call struct {
	*mock.Call
}

// Scrap is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Scrap(key interface{}) *LiveRecording_Scrap_Call {
	return &LiveRecording_Scrap_Call{Call: _e.mock.On("Scrap", key)}
}

func (_c *LiveRecording_Scrap_Call) Run(run func(key *ari.Key)) *LiveRecording_Scrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Scrap_Call) Return(err error) *LiveRecording_Scrap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveRecording_Scrap_Call) RunAndReturn(run func(key *ari.Key) error) *LiveRecording_Scrap_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Stop(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveRecording_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type LiveRecording_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Stop(key interface{}) *LiveRecording_Stop_Call {
	return &LiveRecording_Stop_Call{Call: _e.mock.On("Stop", key)}
}

func (_c *LiveRecording_Stop_Call) Run(run func(key *ari.Key)) *LiveRecording_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Stop_Call) Return(err error) *LiveRecording_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveRecording_Stop_Call) RunAndReturn(run func(key *ari.Key) error) *LiveRecording_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Stored provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Stored(key *ari.Key) *ari.StoredRecordingHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Stored")
	}

	var r0 *ari.StoredRecordingHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.StoredRecordingHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.StoredRecordingHandle)
		}
	}
	return r0
}

// LiveRecording_Stored_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stored'
type LiveRecording_Stored_Call struct {
	*mock.Call
}

// Stored is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Stored(key interface{}) *LiveRecording_Stored_Call {
	return &LiveRecording_Stored_Call{Call: _e.mock.On("Stored", key)}
}

func (_c *LiveRecording_Stored_Call) Run(run func(key *ari.Key)) *LiveRecording_Stored_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Stored_Call) Return(storedRecordingHandle *ari.StoredRecordingHandle) *LiveRecording_Stored_Call {
	_c.Call.Return(storedRecordingHandle)
	return _c
}

func (_c *LiveRecording_Stored_Call) RunAndReturn(run func(key *ari.Key) *ari.StoredRecordingHandle) *LiveRecording_Stored_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Subscribe(key *ari.Key, n ...string) ari.Subscription {
	// string
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 ari.Subscription
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, ...string) ari.Subscription); ok {
		r0 = returnFunc(key, n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}
	return r0
}

// LiveRecording_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type LiveRecording_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - key *ari.Key
//   - n ...string
func (_e *LiveRecording_Expecter) Subscribe(key interface{}, n ...interface{}) *LiveRecording_Subscribe_Call {
	return &LiveRecording_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{key}, n...)...)}
}

func (_c *LiveRecording_Subscribe_Call) Run(run func(key *ari.Key, n ...string)) *LiveRecording_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 []string
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *LiveRecording_Subscribe_Call) Return(subscription ari.Subscription) *LiveRecording_Subscribe_Call {
	_c.Call.Return(subscription)
	return _c
}

func (_c *LiveRecording_Subscribe_Call) RunAndReturn(run func(key *ari.Key, n ...string) ari.Subscription) *LiveRecording_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unmute provides a mock function for the type LiveRecording
func (_mock *LiveRecording) Unmute(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Unmute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveRecording_Unmute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmute'
type LiveRecording_Unmute_Call struct {
	*mock.Call
}

// Unmute is a helper method to define mock.On call
//   - key *ari.Key
func (_e *LiveRecording_Expecter) Unmute(key interface{}) *LiveRecording_Unmute_Call {
	return &LiveRecording_Unmute_Call{Call: _e.mock.On("Unmute", key)}
}

func (_c *LiveRecording_Unmute_Call) Run(run func(key *ari.Key)) *LiveRecording_Unmute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveRecording_Unmute_Call) Return(err error) *LiveRecording_Unmute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveRecording_Unmute_Call) RunAndReturn(run func(key *ari.Key) error) *LiveRecording_Unmute_Call {
	_c.Call.Return(run)
	return _c
}
