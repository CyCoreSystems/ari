package arimocks

import mock "github.com/stretchr/testify/mock"
import play "github.com/AVOXI/ari/ext/play"

// Session is an autogenerated mock type for the Session type
type Session struct {
	mock.Mock
}

// Add provides a mock function with given fields: list
func (_m *Session) Add(list ...string) {
	_va := make([]interface{}, len(list))
	for _i := range list {
		_va[_i] = list[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Done provides a mock function with given fields:
func (_m *Session) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *Session) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Result provides a mock function with given fields:
func (_m *Session) Result() (*play.Result, error) {
	ret := _m.Called()

	var r0 *play.Result
	if rf, ok := ret.Get(0).(func() *play.Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*play.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Session) Stop() {
	_m.Called()
}

// StopAudio provides a mock function with given fields:
func (_m *Session) StopAudio() {
	_m.Called()
}
