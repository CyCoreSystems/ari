// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewLogging creates a new instance of Logging. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogging(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logging {
	mock := &Logging{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Logging is an autogenerated mock type for the Logging type
type Logging struct {
	mock.Mock
}

type Logging_Expecter struct {
	mock *mock.Mock
}

func (_m *Logging) EXPECT() *Logging_Expecter {
	return &Logging_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type Logging
func (_mock *Logging) Create(key *ari.Key, levels string) (*ari.LogHandle, error) {
	ret := _mock.Called(key, levels)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ari.LogHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) (*ari.LogHandle, error)); ok {
		return returnFunc(key, levels)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) *ari.LogHandle); ok {
		r0 = returnFunc(key, levels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LogHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string) error); ok {
		r1 = returnFunc(key, levels)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Logging_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Logging_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - key *ari.Key
//   - levels string
func (_e *Logging_Expecter) Create(key interface{}, levels interface{}) *Logging_Create_Call {
	return &Logging_Create_Call{Call: _e.mock.On("Create", key, levels)}
}

func (_c *Logging_Create_Call) Run(run func(key *ari.Key, levels string)) *Logging_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Logging_Create_Call) Return(logHandle *ari.LogHandle, err error) *Logging_Create_Call {
	_c.Call.Return(logHandle, err)
	return _c
}

func (_c *Logging_Create_Call) RunAndReturn(run func(key *ari.Key, levels string) (*ari.LogHandle, error)) *Logging_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function for the type Logging
func (_mock *Logging) Data(key *ari.Key) (*ari.LogData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.LogData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.LogData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.LogData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LogData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Logging_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Logging_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Logging_Expecter) Data(key interface{}) *Logging_Data_Call {
	return &Logging_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Logging_Data_Call) Run(run func(key *ari.Key)) *Logging_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Logging_Data_Call) Return(logData *ari.LogData, err error) *Logging_Data_Call {
	_c.Call.Return(logData, err)
	return _c
}

func (_c *Logging_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.LogData, error)) *Logging_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type Logging
func (_mock *Logging) Delete(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Logging_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Logging_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Logging_Expecter) Delete(key interface{}) *Logging_Delete_Call {
	return &Logging_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *Logging_Delete_Call) Run(run func(key *ari.Key)) *Logging_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Logging_Delete_Call) Return(err error) *Logging_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Logging_Delete_Call) RunAndReturn(run func(key *ari.Key) error) *Logging_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Logging
func (_mock *Logging) Get(key *ari.Key) *ari.LogHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.LogHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.LogHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LogHandle)
		}
	}
	return r0
}

// Logging_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Logging_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Logging_Expecter) Get(key interface{}) *Logging_Get_Call {
	return &Logging_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Logging_Get_Call) Run(run func(key *ari.Key)) *Logging_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Logging_Get_Call) Return(logHandle *ari.LogHandle) *Logging_Get_Call {
	_c.Call.Return(logHandle)
	return _c
}

func (_c *Logging_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.LogHandle) *Logging_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Logging
func (_mock *Logging) List(filter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Logging_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Logging_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter *ari.Key
func (_e *Logging_Expecter) List(filter interface{}) *Logging_List_Call {
	return &Logging_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *Logging_List_Call) Run(run func(filter *ari.Key)) *Logging_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Logging_List_Call) Return(keys []*ari.Key, err error) *Logging_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Logging_List_Call) RunAndReturn(run func(filter *ari.Key) ([]*ari.Key, error)) *Logging_List_Call {
	_c.Call.Return(run)
	return _c
}

// Rotate provides a mock function for the type Logging
func (_mock *Logging) Rotate(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Rotate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Logging_Rotate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rotate'
type Logging_Rotate_Call struct {
	*mock.Call
}

// Rotate is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Logging_Expecter) Rotate(key interface{}) *Logging_Rotate_Call {
	return &Logging_Rotate_Call{Call: _e.mock.On("Rotate", key)}
}

func (_c *Logging_Rotate_Call) Run(run func(key *ari.Key)) *Logging_Rotate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Logging_Rotate_Call) Return(err error) *Logging_Rotate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Logging_Rotate_Call) RunAndReturn(run func(key *ari.Key) error) *Logging_Rotate_Call {
	_c.Call.Return(run)
	return _c
}
