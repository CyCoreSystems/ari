// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewAsterisk creates a new instance of Asterisk. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsterisk(t interface {
	mock.TestingT
	Cleanup(func())
}) *Asterisk {
	mock := &Asterisk{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Asterisk is an autogenerated mock type for the Asterisk type
type Asterisk struct {
	mock.Mock
}

type Asterisk_Expecter struct {
	mock *mock.Mock
}

func (_m *Asterisk) EXPECT() *Asterisk_Expecter {
	return &Asterisk_Expecter{mock: &_m.Mock}
}

// Config provides a mock function for the type Asterisk
func (_mock *Asterisk) Config() ari.Config {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 ari.Config
	if returnFunc, ok := ret.Get(0).(func() ari.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Config)
		}
	}
	return r0
}

// Asterisk_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type Asterisk_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *Asterisk_Expecter) Config() *Asterisk_Config_Call {
	return &Asterisk_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *Asterisk_Config_Call) Run(run func()) *Asterisk_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Asterisk_Config_Call) Return(config ari.Config) *Asterisk_Config_Call {
	_c.Call.Return(config)
	return _c
}

func (_c *Asterisk_Config_Call) RunAndReturn(run func() ari.Config) *Asterisk_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function for the type Asterisk
func (_mock *Asterisk) Info(key *ari.Key) (*ari.AsteriskInfo, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *ari.AsteriskInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.AsteriskInfo, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.AsteriskInfo); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.AsteriskInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Asterisk_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Asterisk_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Asterisk_Expecter) Info(key interface{}) *Asterisk_Info_Call {
	return &Asterisk_Info_Call{Call: _e.mock.On("Info", key)}
}

func (_c *Asterisk_Info_Call) Run(run func(key *ari.Key)) *Asterisk_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Asterisk_Info_Call) Return(asteriskInfo *ari.AsteriskInfo, err error) *Asterisk_Info_Call {
	_c.Call.Return(asteriskInfo, err)
	return _c
}

func (_c *Asterisk_Info_Call) RunAndReturn(run func(key *ari.Key) (*ari.AsteriskInfo, error)) *Asterisk_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Logging provides a mock function for the type Asterisk
func (_mock *Asterisk) Logging() ari.Logging {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logging")
	}

	var r0 ari.Logging
	if returnFunc, ok := ret.Get(0).(func() ari.Logging); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Logging)
		}
	}
	return r0
}

// Asterisk_Logging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logging'
type Asterisk_Logging_Call struct {
	*mock.Call
}

// Logging is a helper method to define mock.On call
func (_e *Asterisk_Expecter) Logging() *Asterisk_Logging_Call {
	return &Asterisk_Logging_Call{Call: _e.mock.On("Logging")}
}

func (_c *Asterisk_Logging_Call) Run(run func()) *Asterisk_Logging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Asterisk_Logging_Call) Return(logging ari.Logging) *Asterisk_Logging_Call {
	_c.Call.Return(logging)
	return _c
}

func (_c *Asterisk_Logging_Call) RunAndReturn(run func() ari.Logging) *Asterisk_Logging_Call {
	_c.Call.Return(run)
	return _c
}

// Modules provides a mock function for the type Asterisk
func (_mock *Asterisk) Modules() ari.Modules {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Modules")
	}

	var r0 ari.Modules
	if returnFunc, ok := ret.Get(0).(func() ari.Modules); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Modules)
		}
	}
	return r0
}

// Asterisk_Modules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Modules'
type Asterisk_Modules_Call struct {
	*mock.Call
}

// Modules is a helper method to define mock.On call
func (_e *Asterisk_Expecter) Modules() *Asterisk_Modules_Call {
	return &Asterisk_Modules_Call{Call: _e.mock.On("Modules")}
}

func (_c *Asterisk_Modules_Call) Run(run func()) *Asterisk_Modules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Asterisk_Modules_Call) Return(modules ari.Modules) *Asterisk_Modules_Call {
	_c.Call.Return(modules)
	return _c
}

func (_c *Asterisk_Modules_Call) RunAndReturn(run func() ari.Modules) *Asterisk_Modules_Call {
	_c.Call.Return(run)
	return _c
}

// Variables provides a mock function for the type Asterisk
func (_mock *Asterisk) Variables() ari.AsteriskVariables {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Variables")
	}

	var r0 ari.AsteriskVariables
	if returnFunc, ok := ret.Get(0).(func() ari.AsteriskVariables); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.AsteriskVariables)
		}
	}
	return r0
}

// Asterisk_Variables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Variables'
type Asterisk_Variables_Call struct {
	*mock.Call
}

// Variables is a helper method to define mock.On call
func (_e *Asterisk_Expecter) Variables() *Asterisk_Variables_Call {
	return &Asterisk_Variables_Call{Call: _e.mock.On("Variables")}
}

func (_c *Asterisk_Variables_Call) Run(run func()) *Asterisk_Variables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Asterisk_Variables_Call) Return(asteriskVariables ari.AsteriskVariables) *Asterisk_Variables_Call {
	_c.Call.Return(asteriskVariables)
	return _c
}

func (_c *Asterisk_Variables_Call) RunAndReturn(run func() ari.AsteriskVariables) *Asterisk_Variables_Call {
	_c.Call.Return(run)
	return _c
}
