// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewPlayback creates a new instance of Playback. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlayback(t interface {
	mock.TestingT
	Cleanup(func())
}) *Playback {
	mock := &Playback{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Playback is an autogenerated mock type for the Playback type
type Playback struct {
	mock.Mock
}

type Playback_Expecter struct {
	mock *mock.Mock
}

func (_m *Playback) EXPECT() *Playback_Expecter {
	return &Playback_Expecter{mock: &_m.Mock}
}

// Control provides a mock function for the type Playback
func (_mock *Playback) Control(key *ari.Key, op string) error {
	ret := _mock.Called(key, op)

	if len(ret) == 0 {
		panic("no return value specified for Control")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, op)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Playback_Control_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Control'
type Playback_Control_Call struct {
	*mock.Call
}

// Control is a helper method to define mock.On call
//   - key *ari.Key
//   - op string
func (_e *Playback_Expecter) Control(key interface{}, op interface{}) *Playback_Control_Call {
	return &Playback_Control_Call{Call: _e.mock.On("Control", key, op)}
}

func (_c *Playback_Control_Call) Run(run func(key *ari.Key, op string)) *Playback_Control_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Playback_Control_Call) Return(err error) *Playback_Control_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Playback_Control_Call) RunAndReturn(run func(key *ari.Key, op string) error) *Playback_Control_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function for the type Playback
func (_mock *Playback) Data(key *ari.Key) (*ari.PlaybackData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.PlaybackData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.PlaybackData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.PlaybackData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.PlaybackData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Playback_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Playback_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Playback_Expecter) Data(key interface{}) *Playback_Data_Call {
	return &Playback_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Playback_Data_Call) Run(run func(key *ari.Key)) *Playback_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Playback_Data_Call) Return(playbackData *ari.PlaybackData, err error) *Playback_Data_Call {
	_c.Call.Return(playbackData, err)
	return _c
}

func (_c *Playback_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.PlaybackData, error)) *Playback_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Playback
func (_mock *Playback) Get(key *ari.Key) *ari.PlaybackHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.PlaybackHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.PlaybackHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.PlaybackHandle)
		}
	}
	return r0
}

// Playback_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Playback_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Playback_Expecter) Get(key interface{}) *Playback_Get_Call {
	return &Playback_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Playback_Get_Call) Run(run func(key *ari.Key)) *Playback_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Playback_Get_Call) Return(playbackHandle *ari.PlaybackHandle) *Playback_Get_Call {
	_c.Call.Return(playbackHandle)
	return _c
}

func (_c *Playback_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.PlaybackHandle) *Playback_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type Playback
func (_mock *Playback) Stop(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Playback_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Playback_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Playback_Expecter) Stop(key interface{}) *Playback_Stop_Call {
	return &Playback_Stop_Call{Call: _e.mock.On("Stop", key)}
}

func (_c *Playback_Stop_Call) Run(run func(key *ari.Key)) *Playback_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Playback_Stop_Call) Return(err error) *Playback_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Playback_Stop_Call) RunAndReturn(run func(key *ari.Key) error) *Playback_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type Playback
func (_mock *Playback) Subscribe(key *ari.Key, n ...string) ari.Subscription {
	// string
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 ari.Subscription
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, ...string) ari.Subscription); ok {
		r0 = returnFunc(key, n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}
	return r0
}

// Playback_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Playback_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - key *ari.Key
//   - n ...string
func (_e *Playback_Expecter) Subscribe(key interface{}, n ...interface{}) *Playback_Subscribe_Call {
	return &Playback_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{key}, n...)...)}
}

func (_c *Playback_Subscribe_Call) Run(run func(key *ari.Key, n ...string)) *Playback_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 []string
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Playback_Subscribe_Call) Return(subscription ari.Subscription) *Playback_Subscribe_Call {
	_c.Call.Return(subscription)
	return _c
}

func (_c *Playback_Subscribe_Call) RunAndReturn(run func(key *ari.Key, n ...string) ari.Subscription) *Playback_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
