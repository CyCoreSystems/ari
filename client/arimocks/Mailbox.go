// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewMailbox creates a new instance of Mailbox. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailbox(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mailbox {
	mock := &Mailbox{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Mailbox is an autogenerated mock type for the Mailbox type
type Mailbox struct {
	mock.Mock
}

type Mailbox_Expecter struct {
	mock *mock.Mock
}

func (_m *Mailbox) EXPECT() *Mailbox_Expecter {
	return &Mailbox_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type Mailbox
func (_mock *Mailbox) Data(key *ari.Key) (*ari.MailboxData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.MailboxData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.MailboxData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.MailboxData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.MailboxData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mailbox_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Mailbox_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Mailbox_Expecter) Data(key interface{}) *Mailbox_Data_Call {
	return &Mailbox_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Mailbox_Data_Call) Run(run func(key *ari.Key)) *Mailbox_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Mailbox_Data_Call) Return(mailboxData *ari.MailboxData, err error) *Mailbox_Data_Call {
	_c.Call.Return(mailboxData, err)
	return _c
}

func (_c *Mailbox_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.MailboxData, error)) *Mailbox_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type Mailbox
func (_mock *Mailbox) Delete(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mailbox_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Mailbox_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Mailbox_Expecter) Delete(key interface{}) *Mailbox_Delete_Call {
	return &Mailbox_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *Mailbox_Delete_Call) Run(run func(key *ari.Key)) *Mailbox_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Mailbox_Delete_Call) Return(err error) *Mailbox_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mailbox_Delete_Call) RunAndReturn(run func(key *ari.Key) error) *Mailbox_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Mailbox
func (_mock *Mailbox) Get(key *ari.Key) *ari.MailboxHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.MailboxHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.MailboxHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.MailboxHandle)
		}
	}
	return r0
}

// Mailbox_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Mailbox_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Mailbox_Expecter) Get(key interface{}) *Mailbox_Get_Call {
	return &Mailbox_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Mailbox_Get_Call) Run(run func(key *ari.Key)) *Mailbox_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Mailbox_Get_Call) Return(mailboxHandle *ari.MailboxHandle) *Mailbox_Get_Call {
	_c.Call.Return(mailboxHandle)
	return _c
}

func (_c *Mailbox_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.MailboxHandle) *Mailbox_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Mailbox
func (_mock *Mailbox) List(filter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Mailbox_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Mailbox_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter *ari.Key
func (_e *Mailbox_Expecter) List(filter interface{}) *Mailbox_List_Call {
	return &Mailbox_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *Mailbox_List_Call) Run(run func(filter *ari.Key)) *Mailbox_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Mailbox_List_Call) Return(keys []*ari.Key, err error) *Mailbox_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Mailbox_List_Call) RunAndReturn(run func(filter *ari.Key) ([]*ari.Key, error)) *Mailbox_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type Mailbox
func (_mock *Mailbox) Update(key *ari.Key, oldMessages int, newMessages int) error {
	ret := _mock.Called(key, oldMessages, newMessages)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, int, int) error); ok {
		r0 = returnFunc(key, oldMessages, newMessages)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Mailbox_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Mailbox_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key *ari.Key
//   - oldMessages int
//   - newMessages int
func (_e *Mailbox_Expecter) Update(key interface{}, oldMessages interface{}, newMessages interface{}) *Mailbox_Update_Call {
	return &Mailbox_Update_Call{Call: _e.mock.On("Update", key, oldMessages, newMessages)}
}

func (_c *Mailbox_Update_Call) Run(run func(key *ari.Key, oldMessages int, newMessages int)) *Mailbox_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Mailbox_Update_Call) Return(err error) *Mailbox_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Mailbox_Update_Call) RunAndReturn(run func(key *ari.Key, oldMessages int, newMessages int) error) *Mailbox_Update_Call {
	_c.Call.Return(run)
	return _c
}
