// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewRecorder creates a new instance of Recorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Recorder {
	mock := &Recorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Recorder is an autogenerated mock type for the Recorder type
type Recorder struct {
	mock.Mock
}

type Recorder_Expecter struct {
	mock *mock.Mock
}

func (_m *Recorder) EXPECT() *Recorder_Expecter {
	return &Recorder_Expecter{mock: &_m.Mock}
}

// Record provides a mock function for the type Recorder
func (_mock *Recorder) Record(s string, recordingOptions *ari.RecordingOptions) (*ari.LiveRecordingHandle, error) {
	ret := _mock.Called(s, recordingOptions)

	if len(ret) == 0 {
		panic("no return value specified for Record")
	}

	var r0 *ari.LiveRecordingHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)); ok {
		return returnFunc(s, recordingOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *ari.RecordingOptions) *ari.LiveRecordingHandle); ok {
		r0 = returnFunc(s, recordingOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LiveRecordingHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *ari.RecordingOptions) error); ok {
		r1 = returnFunc(s, recordingOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Recorder_Record_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Record'
type Recorder_Record_Call struct {
	*mock.Call
}

// Record is a helper method to define mock.On call
//   - s string
//   - recordingOptions *ari.RecordingOptions
func (_e *Recorder_Expecter) Record(s interface{}, recordingOptions interface{}) *Recorder_Record_Call {
	return &Recorder_Record_Call{Call: _e.mock.On("Record", s, recordingOptions)}
}

func (_c *Recorder_Record_Call) Run(run func(s string, recordingOptions *ari.RecordingOptions)) *Recorder_Record_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *ari.RecordingOptions
		if args[1] != nil {
			arg1 = args[1].(*ari.RecordingOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Recorder_Record_Call) Return(liveRecordingHandle *ari.LiveRecordingHandle, err error) *Recorder_Record_Call {
	_c.Call.Return(liveRecordingHandle, err)
	return _c
}

func (_c *Recorder_Record_Call) RunAndReturn(run func(s string, recordingOptions *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)) *Recorder_Record_Call {
	_c.Call.Return(run)
	return _c
}

// StageRecord provides a mock function for the type Recorder
func (_mock *Recorder) StageRecord(s string, recordingOptions *ari.RecordingOptions) (*ari.LiveRecordingHandle, error) {
	ret := _mock.Called(s, recordingOptions)

	if len(ret) == 0 {
		panic("no return value specified for StageRecord")
	}

	var r0 *ari.LiveRecordingHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)); ok {
		return returnFunc(s, recordingOptions)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *ari.RecordingOptions) *ari.LiveRecordingHandle); ok {
		r0 = returnFunc(s, recordingOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LiveRecordingHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *ari.RecordingOptions) error); ok {
		r1 = returnFunc(s, recordingOptions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Recorder_StageRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageRecord'
type Recorder_StageRecord_Call struct {
	*mock.Call
}

// StageRecord is a helper method to define mock.On call
//   - s string
//   - recordingOptions *ari.RecordingOptions
func (_e *Recorder_Expecter) StageRecord(s interface{}, recordingOptions interface{}) *Recorder_StageRecord_Call {
	return &Recorder_StageRecord_Call{Call: _e.mock.On("StageRecord", s, recordingOptions)}
}

func (_c *Recorder_StageRecord_Call) Run(run func(s string, recordingOptions *ari.RecordingOptions)) *Recorder_StageRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *ari.RecordingOptions
		if args[1] != nil {
			arg1 = args[1].(*ari.RecordingOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Recorder_StageRecord_Call) Return(liveRecordingHandle *ari.LiveRecordingHandle, err error) *Recorder_StageRecord_Call {
	_c.Call.Return(liveRecordingHandle, err)
	return _c
}

func (_c *Recorder_StageRecord_Call) RunAndReturn(run func(s string, recordingOptions *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)) *Recorder_StageRecord_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type Recorder
func (_mock *Recorder) Subscribe(n ...string) ari.Subscription {
	// string
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 ari.Subscription
	if returnFunc, ok := ret.Get(0).(func(...string) ari.Subscription); ok {
		r0 = returnFunc(n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}
	return r0
}

// Recorder_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Recorder_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - n ...string
func (_e *Recorder_Expecter) Subscribe(n ...interface{}) *Recorder_Subscribe_Call {
	return &Recorder_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{}, n...)...)}
}

func (_c *Recorder_Subscribe_Call) Run(run func(n ...string)) *Recorder_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Recorder_Subscribe_Call) Return(subscription ari.Subscription) *Recorder_Subscribe_Call {
	_c.Call.Return(subscription)
	return _c
}

func (_c *Recorder_Subscribe_Call) RunAndReturn(run func(n ...string) ari.Subscription) *Recorder_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
