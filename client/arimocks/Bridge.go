// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewBridge creates a new instance of Bridge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBridge(t interface {
	mock.TestingT
	Cleanup(func())
}) *Bridge {
	mock := &Bridge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Bridge is an autogenerated mock type for the Bridge type
type Bridge struct {
	mock.Mock
}

type Bridge_Expecter struct {
	mock *mock.Mock
}

func (_m *Bridge) EXPECT() *Bridge_Expecter {
	return &Bridge_Expecter{mock: &_m.Mock}
}

// AddChannel provides a mock function for the type Bridge
func (_mock *Bridge) AddChannel(key *ari.Key, channelID string) error {
	ret := _mock.Called(key, channelID)

	if len(ret) == 0 {
		panic("no return value specified for AddChannel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, channelID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_AddChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChannel'
type Bridge_AddChannel_Call struct {
	*mock.Call
}

// AddChannel is a helper method to define mock.On call
//   - key *ari.Key
//   - channelID string
func (_e *Bridge_Expecter) AddChannel(key interface{}, channelID interface{}) *Bridge_AddChannel_Call {
	return &Bridge_AddChannel_Call{Call: _e.mock.On("AddChannel", key, channelID)}
}

func (_c *Bridge_AddChannel_Call) Run(run func(key *ari.Key, channelID string)) *Bridge_AddChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Bridge_AddChannel_Call) Return(err error) *Bridge_AddChannel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_AddChannel_Call) RunAndReturn(run func(key *ari.Key, channelID string) error) *Bridge_AddChannel_Call {
	_c.Call.Return(run)
	return _c
}

// AddChannelWithOptions provides a mock function for the type Bridge
func (_mock *Bridge) AddChannelWithOptions(key *ari.Key, channelID string, options *ari.BridgeAddChannelOptions) error {
	ret := _mock.Called(key, channelID, options)

	if len(ret) == 0 {
		panic("no return value specified for AddChannelWithOptions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, *ari.BridgeAddChannelOptions) error); ok {
		r0 = returnFunc(key, channelID, options)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_AddChannelWithOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChannelWithOptions'
type Bridge_AddChannelWithOptions_Call struct {
	*mock.Call
}

// AddChannelWithOptions is a helper method to define mock.On call
//   - key *ari.Key
//   - channelID string
//   - options *ari.BridgeAddChannelOptions
func (_e *Bridge_Expecter) AddChannelWithOptions(key interface{}, channelID interface{}, options interface{}) *Bridge_AddChannelWithOptions_Call {
	return &Bridge_AddChannelWithOptions_Call{Call: _e.mock.On("AddChannelWithOptions", key, channelID, options)}
}

func (_c *Bridge_AddChannelWithOptions_Call) Run(run func(key *ari.Key, channelID string, options *ari.BridgeAddChannelOptions)) *Bridge_AddChannelWithOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *ari.BridgeAddChannelOptions
		if args[2] != nil {
			arg2 = args[2].(*ari.BridgeAddChannelOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Bridge_AddChannelWithOptions_Call) Return(err error) *Bridge_AddChannelWithOptions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_AddChannelWithOptions_Call) RunAndReturn(run func(key *ari.Key, channelID string, options *ari.BridgeAddChannelOptions) error) *Bridge_AddChannelWithOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type Bridge
func (_mock *Bridge) Create(key *ari.Key, btype string, name string) (*ari.BridgeHandle, error) {
	ret := _mock.Called(key, btype, name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ari.BridgeHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, string) (*ari.BridgeHandle, error)); ok {
		return returnFunc(key, btype, name)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, string) *ari.BridgeHandle); ok {
		r0 = returnFunc(key, btype, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.BridgeHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string, string) error); ok {
		r1 = returnFunc(key, btype, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Bridge_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - key *ari.Key
//   - btype string
//   - name string
func (_e *Bridge_Expecter) Create(key interface{}, btype interface{}, name interface{}) *Bridge_Create_Call {
	return &Bridge_Create_Call{Call: _e.mock.On("Create", key, btype, name)}
}

func (_c *Bridge_Create_Call) Run(run func(key *ari.Key, btype string, name string)) *Bridge_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Bridge_Create_Call) Return(bridgeHandle *ari.BridgeHandle, err error) *Bridge_Create_Call {
	_c.Call.Return(bridgeHandle, err)
	return _c
}

func (_c *Bridge_Create_Call) RunAndReturn(run func(key *ari.Key, btype string, name string) (*ari.BridgeHandle, error)) *Bridge_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function for the type Bridge
func (_mock *Bridge) Data(key *ari.Key) (*ari.BridgeData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.BridgeData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.BridgeData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.BridgeData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.BridgeData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Bridge_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Bridge_Expecter) Data(key interface{}) *Bridge_Data_Call {
	return &Bridge_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Bridge_Data_Call) Run(run func(key *ari.Key)) *Bridge_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Bridge_Data_Call) Return(bridgeData *ari.BridgeData, err error) *Bridge_Data_Call {
	_c.Call.Return(bridgeData, err)
	return _c
}

func (_c *Bridge_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.BridgeData, error)) *Bridge_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type Bridge
func (_mock *Bridge) Delete(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Bridge_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Bridge_Expecter) Delete(key interface{}) *Bridge_Delete_Call {
	return &Bridge_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *Bridge_Delete_Call) Run(run func(key *ari.Key)) *Bridge_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Bridge_Delete_Call) Return(err error) *Bridge_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_Delete_Call) RunAndReturn(run func(key *ari.Key) error) *Bridge_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Bridge
func (_mock *Bridge) Get(key *ari.Key) *ari.BridgeHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.BridgeHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.BridgeHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.BridgeHandle)
		}
	}
	return r0
}

// Bridge_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Bridge_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Bridge_Expecter) Get(key interface{}) *Bridge_Get_Call {
	return &Bridge_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Bridge_Get_Call) Run(run func(key *ari.Key)) *Bridge_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Bridge_Get_Call) Return(bridgeHandle *ari.BridgeHandle) *Bridge_Get_Call {
	_c.Call.Return(bridgeHandle)
	return _c
}

func (_c *Bridge_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.BridgeHandle) *Bridge_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Bridge
func (_mock *Bridge) List(key *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Bridge_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Bridge_Expecter) List(key interface{}) *Bridge_List_Call {
	return &Bridge_List_Call{Call: _e.mock.On("List", key)}
}

func (_c *Bridge_List_Call) Run(run func(key *ari.Key)) *Bridge_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Bridge_List_Call) Return(keys []*ari.Key, err error) *Bridge_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Bridge_List_Call) RunAndReturn(run func(key *ari.Key) ([]*ari.Key, error)) *Bridge_List_Call {
	_c.Call.Return(run)
	return _c
}

// MOH provides a mock function for the type Bridge
func (_mock *Bridge) MOH(key *ari.Key, moh string) error {
	ret := _mock.Called(key, moh)

	if len(ret) == 0 {
		panic("no return value specified for MOH")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, moh)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_MOH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MOH'
type Bridge_MOH_Call struct {
	*mock.Call
}

// MOH is a helper method to define mock.On call
//   - key *ari.Key
//   - moh string
func (_e *Bridge_Expecter) MOH(key interface{}, moh interface{}) *Bridge_MOH_Call {
	return &Bridge_MOH_Call{Call: _e.mock.On("MOH", key, moh)}
}

func (_c *Bridge_MOH_Call) Run(run func(key *ari.Key, moh string)) *Bridge_MOH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Bridge_MOH_Call) Return(err error) *Bridge_MOH_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_MOH_Call) RunAndReturn(run func(key *ari.Key, moh string) error) *Bridge_MOH_Call {
	_c.Call.Return(run)
	return _c
}

// Play provides a mock function for the type Bridge
func (_mock *Bridge) Play(key *ari.Key, playbackID string, mediaURI ...string) (*ari.PlaybackHandle, error) {
	// string
	_va := make([]interface{}, len(mediaURI))
	for _i := range mediaURI {
		_va[_i] = mediaURI[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, playbackID)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Play")
	}

	var r0 *ari.PlaybackHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, ...string) (*ari.PlaybackHandle, error)); ok {
		return returnFunc(key, playbackID, mediaURI...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, ...string) *ari.PlaybackHandle); ok {
		r0 = returnFunc(key, playbackID, mediaURI...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.PlaybackHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string, ...string) error); ok {
		r1 = returnFunc(key, playbackID, mediaURI...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_Play_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Play'
type Bridge_Play_Call struct {
	*mock.Call
}

// Play is a helper method to define mock.On call
//   - key *ari.Key
//   - playbackID string
//   - mediaURI ...string
func (_e *Bridge_Expecter) Play(key interface{}, playbackID interface{}, mediaURI ...interface{}) *Bridge_Play_Call {
	return &Bridge_Play_Call{Call: _e.mock.On("Play",
		append([]interface{}{key, playbackID}, mediaURI...)...)}
}

func (_c *Bridge_Play_Call) Run(run func(key *ari.Key, playbackID string, mediaURI ...string)) *Bridge_Play_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Bridge_Play_Call) Return(playbackHandle *ari.PlaybackHandle, err error) *Bridge_Play_Call {
	_c.Call.Return(playbackHandle, err)
	return _c
}

func (_c *Bridge_Play_Call) RunAndReturn(run func(key *ari.Key, playbackID string, mediaURI ...string) (*ari.PlaybackHandle, error)) *Bridge_Play_Call {
	_c.Call.Return(run)
	return _c
}

// Record provides a mock function for the type Bridge
func (_mock *Bridge) Record(key *ari.Key, name string, opts *ari.RecordingOptions) (*ari.LiveRecordingHandle, error) {
	ret := _mock.Called(key, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Record")
	}

	var r0 *ari.LiveRecordingHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)); ok {
		return returnFunc(key, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, *ari.RecordingOptions) *ari.LiveRecordingHandle); ok {
		r0 = returnFunc(key, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LiveRecordingHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string, *ari.RecordingOptions) error); ok {
		r1 = returnFunc(key, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_Record_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Record'
type Bridge_Record_Call struct {
	*mock.Call
}

// Record is a helper method to define mock.On call
//   - key *ari.Key
//   - name string
//   - opts *ari.RecordingOptions
func (_e *Bridge_Expecter) Record(key interface{}, name interface{}, opts interface{}) *Bridge_Record_Call {
	return &Bridge_Record_Call{Call: _e.mock.On("Record", key, name, opts)}
}

func (_c *Bridge_Record_Call) Run(run func(key *ari.Key, name string, opts *ari.RecordingOptions)) *Bridge_Record_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *ari.RecordingOptions
		if args[2] != nil {
			arg2 = args[2].(*ari.RecordingOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Bridge_Record_Call) Return(liveRecordingHandle *ari.LiveRecordingHandle, err error) *Bridge_Record_Call {
	_c.Call.Return(liveRecordingHandle, err)
	return _c
}

func (_c *Bridge_Record_Call) RunAndReturn(run func(key *ari.Key, name string, opts *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)) *Bridge_Record_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannel provides a mock function for the type Bridge
func (_mock *Bridge) RemoveChannel(key *ari.Key, channelID string) error {
	ret := _mock.Called(key, channelID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, channelID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_RemoveChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannel'
type Bridge_RemoveChannel_Call struct {
	*mock.Call
}

// RemoveChannel is a helper method to define mock.On call
//   - key *ari.Key
//   - channelID string
func (_e *Bridge_Expecter) RemoveChannel(key interface{}, channelID interface{}) *Bridge_RemoveChannel_Call {
	return &Bridge_RemoveChannel_Call{Call: _e.mock.On("RemoveChannel", key, channelID)}
}

func (_c *Bridge_RemoveChannel_Call) Run(run func(key *ari.Key, channelID string)) *Bridge_RemoveChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Bridge_RemoveChannel_Call) Return(err error) *Bridge_RemoveChannel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_RemoveChannel_Call) RunAndReturn(run func(key *ari.Key, channelID string) error) *Bridge_RemoveChannel_Call {
	_c.Call.Return(run)
	return _c
}

// StageCreate provides a mock function for the type Bridge
func (_mock *Bridge) StageCreate(key *ari.Key, btype string, name string) (*ari.BridgeHandle, error) {
	ret := _mock.Called(key, btype, name)

	if len(ret) == 0 {
		panic("no return value specified for StageCreate")
	}

	var r0 *ari.BridgeHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, string) (*ari.BridgeHandle, error)); ok {
		return returnFunc(key, btype, name)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, string) *ari.BridgeHandle); ok {
		r0 = returnFunc(key, btype, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.BridgeHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string, string) error); ok {
		r1 = returnFunc(key, btype, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_StageCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageCreate'
type Bridge_StageCreate_Call struct {
	*mock.Call
}

// StageCreate is a helper method to define mock.On call
//   - key *ari.Key
//   - btype string
//   - name string
func (_e *Bridge_Expecter) StageCreate(key interface{}, btype interface{}, name interface{}) *Bridge_StageCreate_Call {
	return &Bridge_StageCreate_Call{Call: _e.mock.On("StageCreate", key, btype, name)}
}

func (_c *Bridge_StageCreate_Call) Run(run func(key *ari.Key, btype string, name string)) *Bridge_StageCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Bridge_StageCreate_Call) Return(bridgeHandle *ari.BridgeHandle, err error) *Bridge_StageCreate_Call {
	_c.Call.Return(bridgeHandle, err)
	return _c
}

func (_c *Bridge_StageCreate_Call) RunAndReturn(run func(key *ari.Key, btype string, name string) (*ari.BridgeHandle, error)) *Bridge_StageCreate_Call {
	_c.Call.Return(run)
	return _c
}

// StagePlay provides a mock function for the type Bridge
func (_mock *Bridge) StagePlay(key *ari.Key, playbackID string, mediaURI ...string) (*ari.PlaybackHandle, error) {
	// string
	_va := make([]interface{}, len(mediaURI))
	for _i := range mediaURI {
		_va[_i] = mediaURI[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, playbackID)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StagePlay")
	}

	var r0 *ari.PlaybackHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, ...string) (*ari.PlaybackHandle, error)); ok {
		return returnFunc(key, playbackID, mediaURI...)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, ...string) *ari.PlaybackHandle); ok {
		r0 = returnFunc(key, playbackID, mediaURI...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.PlaybackHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string, ...string) error); ok {
		r1 = returnFunc(key, playbackID, mediaURI...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_StagePlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StagePlay'
type Bridge_StagePlay_Call struct {
	*mock.Call
}

// StagePlay is a helper method to define mock.On call
//   - key *ari.Key
//   - playbackID string
//   - mediaURI ...string
func (_e *Bridge_Expecter) StagePlay(key interface{}, playbackID interface{}, mediaURI ...interface{}) *Bridge_StagePlay_Call {
	return &Bridge_StagePlay_Call{Call: _e.mock.On("StagePlay",
		append([]interface{}{key, playbackID}, mediaURI...)...)}
}

func (_c *Bridge_StagePlay_Call) Run(run func(key *ari.Key, playbackID string, mediaURI ...string)) *Bridge_StagePlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *Bridge_StagePlay_Call) Return(playbackHandle *ari.PlaybackHandle, err error) *Bridge_StagePlay_Call {
	_c.Call.Return(playbackHandle, err)
	return _c
}

func (_c *Bridge_StagePlay_Call) RunAndReturn(run func(key *ari.Key, playbackID string, mediaURI ...string) (*ari.PlaybackHandle, error)) *Bridge_StagePlay_Call {
	_c.Call.Return(run)
	return _c
}

// StageRecord provides a mock function for the type Bridge
func (_mock *Bridge) StageRecord(key *ari.Key, name string, opts *ari.RecordingOptions) (*ari.LiveRecordingHandle, error) {
	ret := _mock.Called(key, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for StageRecord")
	}

	var r0 *ari.LiveRecordingHandle
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)); ok {
		return returnFunc(key, name, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string, *ari.RecordingOptions) *ari.LiveRecordingHandle); ok {
		r0 = returnFunc(key, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.LiveRecordingHandle)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key, string, *ari.RecordingOptions) error); ok {
		r1 = returnFunc(key, name, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Bridge_StageRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageRecord'
type Bridge_StageRecord_Call struct {
	*mock.Call
}

// StageRecord is a helper method to define mock.On call
//   - key *ari.Key
//   - name string
//   - opts *ari.RecordingOptions
func (_e *Bridge_Expecter) StageRecord(key interface{}, name interface{}, opts interface{}) *Bridge_StageRecord_Call {
	return &Bridge_StageRecord_Call{Call: _e.mock.On("StageRecord", key, name, opts)}
}

func (_c *Bridge_StageRecord_Call) Run(run func(key *ari.Key, name string, opts *ari.RecordingOptions)) *Bridge_StageRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *ari.RecordingOptions
		if args[2] != nil {
			arg2 = args[2].(*ari.RecordingOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Bridge_StageRecord_Call) Return(liveRecordingHandle *ari.LiveRecordingHandle, err error) *Bridge_StageRecord_Call {
	_c.Call.Return(liveRecordingHandle, err)
	return _c
}

func (_c *Bridge_StageRecord_Call) RunAndReturn(run func(key *ari.Key, name string, opts *ari.RecordingOptions) (*ari.LiveRecordingHandle, error)) *Bridge_StageRecord_Call {
	_c.Call.Return(run)
	return _c
}

// StopMOH provides a mock function for the type Bridge
func (_mock *Bridge) StopMOH(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for StopMOH")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_StopMOH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopMOH'
type Bridge_StopMOH_Call struct {
	*mock.Call
}

// StopMOH is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Bridge_Expecter) StopMOH(key interface{}) *Bridge_StopMOH_Call {
	return &Bridge_StopMOH_Call{Call: _e.mock.On("StopMOH", key)}
}

func (_c *Bridge_StopMOH_Call) Run(run func(key *ari.Key)) *Bridge_StopMOH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Bridge_StopMOH_Call) Return(err error) *Bridge_StopMOH_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_StopMOH_Call) RunAndReturn(run func(key *ari.Key) error) *Bridge_StopMOH_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type Bridge
func (_mock *Bridge) Subscribe(key *ari.Key, n ...string) ari.Subscription {
	// string
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 ari.Subscription
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, ...string) ari.Subscription); ok {
		r0 = returnFunc(key, n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}
	return r0
}

// Bridge_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Bridge_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - key *ari.Key
//   - n ...string
func (_e *Bridge_Expecter) Subscribe(key interface{}, n ...interface{}) *Bridge_Subscribe_Call {
	return &Bridge_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{key}, n...)...)}
}

func (_c *Bridge_Subscribe_Call) Run(run func(key *ari.Key, n ...string)) *Bridge_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 []string
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Bridge_Subscribe_Call) Return(subscription ari.Subscription) *Bridge_Subscribe_Call {
	_c.Call.Return(subscription)
	return _c
}

func (_c *Bridge_Subscribe_Call) RunAndReturn(run func(key *ari.Key, n ...string) ari.Subscription) *Bridge_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// VideoSource provides a mock function for the type Bridge
func (_mock *Bridge) VideoSource(key *ari.Key, channelID string) error {
	ret := _mock.Called(key, channelID)

	if len(ret) == 0 {
		panic("no return value specified for VideoSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, channelID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_VideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VideoSource'
type Bridge_VideoSource_Call struct {
	*mock.Call
}

// VideoSource is a helper method to define mock.On call
//   - key *ari.Key
//   - channelID string
func (_e *Bridge_Expecter) VideoSource(key interface{}, channelID interface{}) *Bridge_VideoSource_Call {
	return &Bridge_VideoSource_Call{Call: _e.mock.On("VideoSource", key, channelID)}
}

func (_c *Bridge_VideoSource_Call) Run(run func(key *ari.Key, channelID string)) *Bridge_VideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Bridge_VideoSource_Call) Return(err error) *Bridge_VideoSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_VideoSource_Call) RunAndReturn(run func(key *ari.Key, channelID string) error) *Bridge_VideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// VideoSourceDelete provides a mock function for the type Bridge
func (_mock *Bridge) VideoSourceDelete(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for VideoSourceDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Bridge_VideoSourceDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VideoSourceDelete'
type Bridge_VideoSourceDelete_Call struct {
	*mock.Call
}

// VideoSourceDelete is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Bridge_Expecter) VideoSourceDelete(key interface{}) *Bridge_VideoSourceDelete_Call {
	return &Bridge_VideoSourceDelete_Call{Call: _e.mock.On("VideoSourceDelete", key)}
}

func (_c *Bridge_VideoSourceDelete_Call) Run(run func(key *ari.Key)) *Bridge_VideoSourceDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Bridge_VideoSourceDelete_Call) Return(err error) *Bridge_VideoSourceDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Bridge_VideoSourceDelete_Call) RunAndReturn(run func(key *ari.Key) error) *Bridge_VideoSourceDelete_Call {
	_c.Call.Return(run)
	return _c
}
