// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewMatcher creates a new instance of Matcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Matcher {
	mock := &Matcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Matcher is an autogenerated mock type for the Matcher type
type Matcher struct {
	mock.Mock
}

type Matcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Matcher) EXPECT() *Matcher_Expecter {
	return &Matcher_Expecter{mock: &_m.Mock}
}

// Match provides a mock function for the type Matcher
func (_mock *Matcher) Match(o *ari.Key) bool {
	ret := _mock.Called(o)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) bool); ok {
		r0 = returnFunc(o)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Matcher_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type Matcher_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - o *ari.Key
func (_e *Matcher_Expecter) Match(o interface{}) *Matcher_Match_Call {
	return &Matcher_Match_Call{Call: _e.mock.On("Match", o)}
}

func (_c *Matcher_Match_Call) Run(run func(o *ari.Key)) *Matcher_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Matcher_Match_Call) Return(b bool) *Matcher_Match_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Matcher_Match_Call) RunAndReturn(run func(o *ari.Key) bool) *Matcher_Match_Call {
	_c.Call.Return(run)
	return _c
}
