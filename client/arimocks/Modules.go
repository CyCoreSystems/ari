// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewModules creates a new instance of Modules. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModules(t interface {
	mock.TestingT
	Cleanup(func())
}) *Modules {
	mock := &Modules{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Modules is an autogenerated mock type for the Modules type
type Modules struct {
	mock.Mock
}

type Modules_Expecter struct {
	mock *mock.Mock
}

func (_m *Modules) EXPECT() *Modules_Expecter {
	return &Modules_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type Modules
func (_mock *Modules) Data(key *ari.Key) (*ari.ModuleData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.ModuleData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.ModuleData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.ModuleData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ModuleData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Modules_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Modules_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Modules_Expecter) Data(key interface{}) *Modules_Data_Call {
	return &Modules_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Modules_Data_Call) Run(run func(key *ari.Key)) *Modules_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Modules_Data_Call) Return(moduleData *ari.ModuleData, err error) *Modules_Data_Call {
	_c.Call.Return(moduleData, err)
	return _c
}

func (_c *Modules_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.ModuleData, error)) *Modules_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Modules
func (_mock *Modules) Get(key *ari.Key) *ari.ModuleHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.ModuleHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.ModuleHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ModuleHandle)
		}
	}
	return r0
}

// Modules_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Modules_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Modules_Expecter) Get(key interface{}) *Modules_Get_Call {
	return &Modules_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Modules_Get_Call) Run(run func(key *ari.Key)) *Modules_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Modules_Get_Call) Return(moduleHandle *ari.ModuleHandle) *Modules_Get_Call {
	_c.Call.Return(moduleHandle)
	return _c
}

func (_c *Modules_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.ModuleHandle) *Modules_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Modules
func (_mock *Modules) List(filter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Modules_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Modules_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter *ari.Key
func (_e *Modules_Expecter) List(filter interface{}) *Modules_List_Call {
	return &Modules_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *Modules_List_Call) Run(run func(filter *ari.Key)) *Modules_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Modules_List_Call) Return(keys []*ari.Key, err error) *Modules_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Modules_List_Call) RunAndReturn(run func(filter *ari.Key) ([]*ari.Key, error)) *Modules_List_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function for the type Modules
func (_mock *Modules) Load(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Modules_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Modules_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Modules_Expecter) Load(key interface{}) *Modules_Load_Call {
	return &Modules_Load_Call{Call: _e.mock.On("Load", key)}
}

func (_c *Modules_Load_Call) Run(run func(key *ari.Key)) *Modules_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Modules_Load_Call) Return(err error) *Modules_Load_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Modules_Load_Call) RunAndReturn(run func(key *ari.Key) error) *Modules_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Reload provides a mock function for the type Modules
func (_mock *Modules) Reload(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Reload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Modules_Reload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reload'
type Modules_Reload_Call struct {
	*mock.Call
}

// Reload is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Modules_Expecter) Reload(key interface{}) *Modules_Reload_Call {
	return &Modules_Reload_Call{Call: _e.mock.On("Reload", key)}
}

func (_c *Modules_Reload_Call) Run(run func(key *ari.Key)) *Modules_Reload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Modules_Reload_Call) Return(err error) *Modules_Reload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Modules_Reload_Call) RunAndReturn(run func(key *ari.Key) error) *Modules_Reload_Call {
	_c.Call.Return(run)
	return _c
}

// Unload provides a mock function for the type Modules
func (_mock *Modules) Unload(key *ari.Key) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Unload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Modules_Unload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unload'
type Modules_Unload_Call struct {
	*mock.Call
}

// Unload is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Modules_Expecter) Unload(key interface{}) *Modules_Unload_Call {
	return &Modules_Unload_Call{Call: _e.mock.On("Unload", key)}
}

func (_c *Modules_Unload_Call) Run(run func(key *ari.Key)) *Modules_Unload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Modules_Unload_Call) Return(err error) *Modules_Unload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Modules_Unload_Call) RunAndReturn(run func(key *ari.Key) error) *Modules_Unload_Call {
	_c.Call.Return(run)
	return _c
}
