// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewSound creates a new instance of Sound. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSound(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sound {
	mock := &Sound{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Sound is an autogenerated mock type for the Sound type
type Sound struct {
	mock.Mock
}

type Sound_Expecter struct {
	mock *mock.Mock
}

func (_m *Sound) EXPECT() *Sound_Expecter {
	return &Sound_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type Sound
func (_mock *Sound) Data(key *ari.Key) (*ari.SoundData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.SoundData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.SoundData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.SoundData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.SoundData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Sound_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Sound_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Sound_Expecter) Data(key interface{}) *Sound_Data_Call {
	return &Sound_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Sound_Data_Call) Run(run func(key *ari.Key)) *Sound_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Sound_Data_Call) Return(soundData *ari.SoundData, err error) *Sound_Data_Call {
	_c.Call.Return(soundData, err)
	return _c
}

func (_c *Sound_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.SoundData, error)) *Sound_Data_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Sound
func (_mock *Sound) List(filters map[string]string, keyFilter *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(filters, keyFilter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(map[string]string, *ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(filters, keyFilter)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]string, *ari.Key) []*ari.Key); ok {
		r0 = returnFunc(filters, keyFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]string, *ari.Key) error); ok {
		r1 = returnFunc(filters, keyFilter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Sound_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Sound_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filters map[string]string
//   - keyFilter *ari.Key
func (_e *Sound_Expecter) List(filters interface{}, keyFilter interface{}) *Sound_List_Call {
	return &Sound_List_Call{Call: _e.mock.On("List", filters, keyFilter)}
}

func (_c *Sound_List_Call) Run(run func(filters map[string]string, keyFilter *ari.Key)) *Sound_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]string
		if args[0] != nil {
			arg0 = args[0].(map[string]string)
		}
		var arg1 *ari.Key
		if args[1] != nil {
			arg1 = args[1].(*ari.Key)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Sound_List_Call) Return(keys []*ari.Key, err error) *Sound_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Sound_List_Call) RunAndReturn(run func(filters map[string]string, keyFilter *ari.Key) ([]*ari.Key, error)) *Sound_List_Call {
	_c.Call.Return(run)
	return _c
}
