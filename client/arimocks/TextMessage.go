// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewTextMessage creates a new instance of TextMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTextMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *TextMessage {
	mock := &TextMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TextMessage is an autogenerated mock type for the TextMessage type
type TextMessage struct {
	mock.Mock
}

type TextMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *TextMessage) EXPECT() *TextMessage_Expecter {
	return &TextMessage_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type TextMessage
func (_mock *TextMessage) Send(from string, tech string, resource string, body string, vars map[string]string) error {
	ret := _mock.Called(from, tech, resource, body, vars)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, map[string]string) error); ok {
		r0 = returnFunc(from, tech, resource, body, vars)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TextMessage_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type TextMessage_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - from string
//   - tech string
//   - resource string
//   - body string
//   - vars map[string]string
func (_e *TextMessage_Expecter) Send(from interface{}, tech interface{}, resource interface{}, body interface{}, vars interface{}) *TextMessage_Send_Call {
	return &TextMessage_Send_Call{Call: _e.mock.On("Send", from, tech, resource, body, vars)}
}

func (_c *TextMessage_Send_Call) Run(run func(from string, tech string, resource string, body string, vars map[string]string)) *TextMessage_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 map[string]string
		if args[4] != nil {
			arg4 = args[4].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *TextMessage_Send_Call) Return(err error) *TextMessage_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TextMessage_Send_Call) RunAndReturn(run func(from string, tech string, resource string, body string, vars map[string]string) error) *TextMessage_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendByURI provides a mock function for the type TextMessage
func (_mock *TextMessage) SendByURI(from string, to string, body string, vars map[string]string) error {
	ret := _mock.Called(from, to, body, vars)

	if len(ret) == 0 {
		panic("no return value specified for SendByURI")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, map[string]string) error); ok {
		r0 = returnFunc(from, to, body, vars)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TextMessage_SendByURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendByURI'
type TextMessage_SendByURI_Call struct {
	*mock.Call
}

// SendByURI is a helper method to define mock.On call
//   - from string
//   - to string
//   - body string
//   - vars map[string]string
func (_e *TextMessage_Expecter) SendByURI(from interface{}, to interface{}, body interface{}, vars interface{}) *TextMessage_SendByURI_Call {
	return &TextMessage_SendByURI_Call{Call: _e.mock.On("SendByURI", from, to, body, vars)}
}

func (_c *TextMessage_SendByURI_Call) Run(run func(from string, to string, body string, vars map[string]string)) *TextMessage_SendByURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 map[string]string
		if args[3] != nil {
			arg3 = args[3].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *TextMessage_SendByURI_Call) Return(err error) *TextMessage_SendByURI_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TextMessage_SendByURI_Call) RunAndReturn(run func(from string, to string, body string, vars map[string]string) error) *TextMessage_SendByURI_Call {
	_c.Call.Return(run)
	return _c
}
