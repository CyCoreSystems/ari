// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/exp/slog"
)

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Application provides a mock function for the type Client
func (_mock *Client) Application() ari.Application {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Application")
	}

	var r0 ari.Application
	if returnFunc, ok := ret.Get(0).(func() ari.Application); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Application)
		}
	}
	return r0
}

// Client_Application_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Application'
type Client_Application_Call struct {
	*mock.Call
}

// Application is a helper method to define mock.On call
func (_e *Client_Expecter) Application() *Client_Application_Call {
	return &Client_Application_Call{Call: _e.mock.On("Application")}
}

func (_c *Client_Application_Call) Run(run func()) *Client_Application_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Application_Call) Return(application ari.Application) *Client_Application_Call {
	_c.Call.Return(application)
	return _c
}

func (_c *Client_Application_Call) RunAndReturn(run func() ari.Application) *Client_Application_Call {
	_c.Call.Return(run)
	return _c
}

// ApplicationName provides a mock function for the type Client
func (_mock *Client) ApplicationName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ApplicationName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Client_ApplicationName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplicationName'
type Client_ApplicationName_Call struct {
	*mock.Call
}

// ApplicationName is a helper method to define mock.On call
func (_e *Client_Expecter) ApplicationName() *Client_ApplicationName_Call {
	return &Client_ApplicationName_Call{Call: _e.mock.On("ApplicationName")}
}

func (_c *Client_ApplicationName_Call) Run(run func()) *Client_ApplicationName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ApplicationName_Call) Return(s string) *Client_ApplicationName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Client_ApplicationName_Call) RunAndReturn(run func() string) *Client_ApplicationName_Call {
	_c.Call.Return(run)
	return _c
}

// Asterisk provides a mock function for the type Client
func (_mock *Client) Asterisk() ari.Asterisk {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Asterisk")
	}

	var r0 ari.Asterisk
	if returnFunc, ok := ret.Get(0).(func() ari.Asterisk); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Asterisk)
		}
	}
	return r0
}

// Client_Asterisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Asterisk'
type Client_Asterisk_Call struct {
	*mock.Call
}

// Asterisk is a helper method to define mock.On call
func (_e *Client_Expecter) Asterisk() *Client_Asterisk_Call {
	return &Client_Asterisk_Call{Call: _e.mock.On("Asterisk")}
}

func (_c *Client_Asterisk_Call) Run(run func()) *Client_Asterisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Asterisk_Call) Return(asterisk ari.Asterisk) *Client_Asterisk_Call {
	_c.Call.Return(asterisk)
	return _c
}

func (_c *Client_Asterisk_Call) RunAndReturn(run func() ari.Asterisk) *Client_Asterisk_Call {
	_c.Call.Return(run)
	return _c
}

// Bridge provides a mock function for the type Client
func (_mock *Client) Bridge() ari.Bridge {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bridge")
	}

	var r0 ari.Bridge
	if returnFunc, ok := ret.Get(0).(func() ari.Bridge); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Bridge)
		}
	}
	return r0
}

// Client_Bridge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bridge'
type Client_Bridge_Call struct {
	*mock.Call
}

// Bridge is a helper method to define mock.On call
func (_e *Client_Expecter) Bridge() *Client_Bridge_Call {
	return &Client_Bridge_Call{Call: _e.mock.On("Bridge")}
}

func (_c *Client_Bridge_Call) Run(run func()) *Client_Bridge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Bridge_Call) Return(bridge ari.Bridge) *Client_Bridge_Call {
	_c.Call.Return(bridge)
	return _c
}

func (_c *Client_Bridge_Call) RunAndReturn(run func() ari.Bridge) *Client_Bridge_Call {
	_c.Call.Return(run)
	return _c
}

// Bus provides a mock function for the type Client
func (_mock *Client) Bus() ari.Bus {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bus")
	}

	var r0 ari.Bus
	if returnFunc, ok := ret.Get(0).(func() ari.Bus); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Bus)
		}
	}
	return r0
}

// Client_Bus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bus'
type Client_Bus_Call struct {
	*mock.Call
}

// Bus is a helper method to define mock.On call
func (_e *Client_Expecter) Bus() *Client_Bus_Call {
	return &Client_Bus_Call{Call: _e.mock.On("Bus")}
}

func (_c *Client_Bus_Call) Run(run func()) *Client_Bus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Bus_Call) Return(bus ari.Bus) *Client_Bus_Call {
	_c.Call.Return(bus)
	return _c
}

func (_c *Client_Bus_Call) RunAndReturn(run func() ari.Bus) *Client_Bus_Call {
	_c.Call.Return(run)
	return _c
}

// Channel provides a mock function for the type Client
func (_mock *Client) Channel() ari.Channel {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 ari.Channel
	if returnFunc, ok := ret.Get(0).(func() ari.Channel); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Channel)
		}
	}
	return r0
}

// Client_Channel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Channel'
type Client_Channel_Call struct {
	*mock.Call
}

// Channel is a helper method to define mock.On call
func (_e *Client_Expecter) Channel() *Client_Channel_Call {
	return &Client_Channel_Call{Call: _e.mock.On("Channel")}
}

func (_c *Client_Channel_Call) Run(run func()) *Client_Channel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Channel_Call) Return(channel ari.Channel) *Client_Channel_Call {
	_c.Call.Return(channel)
	return _c
}

func (_c *Client_Channel_Call) RunAndReturn(run func() ari.Channel) *Client_Channel_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type Client
func (_mock *Client) Close() {
	_mock.Called()
	return
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return() *Client_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func()) *Client_Close_Call {
	_c.Run(run)
	return _c
}

// Connected provides a mock function for the type Client
func (_mock *Client) Connected() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connected")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Client_Connected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connected'
type Client_Connected_Call struct {
	*mock.Call
}

// Connected is a helper method to define mock.On call
func (_e *Client_Expecter) Connected() *Client_Connected_Call {
	return &Client_Connected_Call{Call: _e.mock.On("Connected")}
}

func (_c *Client_Connected_Call) Run(run func()) *Client_Connected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Connected_Call) Return(b bool) *Client_Connected_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Client_Connected_Call) RunAndReturn(run func() bool) *Client_Connected_Call {
	_c.Call.Return(run)
	return _c
}

// DeviceState provides a mock function for the type Client
func (_mock *Client) DeviceState() ari.DeviceState {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeviceState")
	}

	var r0 ari.DeviceState
	if returnFunc, ok := ret.Get(0).(func() ari.DeviceState); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.DeviceState)
		}
	}
	return r0
}

// Client_DeviceState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeviceState'
type Client_DeviceState_Call struct {
	*mock.Call
}

// DeviceState is a helper method to define mock.On call
func (_e *Client_Expecter) DeviceState() *Client_DeviceState_Call {
	return &Client_DeviceState_Call{Call: _e.mock.On("DeviceState")}
}

func (_c *Client_DeviceState_Call) Run(run func()) *Client_DeviceState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_DeviceState_Call) Return(deviceState ari.DeviceState) *Client_DeviceState_Call {
	_c.Call.Return(deviceState)
	return _c
}

func (_c *Client_DeviceState_Call) RunAndReturn(run func() ari.DeviceState) *Client_DeviceState_Call {
	_c.Call.Return(run)
	return _c
}

// Endpoint provides a mock function for the type Client
func (_mock *Client) Endpoint() ari.Endpoint {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Endpoint")
	}

	var r0 ari.Endpoint
	if returnFunc, ok := ret.Get(0).(func() ari.Endpoint); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Endpoint)
		}
	}
	return r0
}

// Client_Endpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Endpoint'
type Client_Endpoint_Call struct {
	*mock.Call
}

// Endpoint is a helper method to define mock.On call
func (_e *Client_Expecter) Endpoint() *Client_Endpoint_Call {
	return &Client_Endpoint_Call{Call: _e.mock.On("Endpoint")}
}

func (_c *Client_Endpoint_Call) Run(run func()) *Client_Endpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Endpoint_Call) Return(endpoint ari.Endpoint) *Client_Endpoint_Call {
	_c.Call.Return(endpoint)
	return _c
}

func (_c *Client_Endpoint_Call) RunAndReturn(run func() ari.Endpoint) *Client_Endpoint_Call {
	_c.Call.Return(run)
	return _c
}

// LiveRecording provides a mock function for the type Client
func (_mock *Client) LiveRecording() ari.LiveRecording {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LiveRecording")
	}

	var r0 ari.LiveRecording
	if returnFunc, ok := ret.Get(0).(func() ari.LiveRecording); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.LiveRecording)
		}
	}
	return r0
}

// Client_LiveRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiveRecording'
type Client_LiveRecording_Call struct {
	*mock.Call
}

// LiveRecording is a helper method to define mock.On call
func (_e *Client_Expecter) LiveRecording() *Client_LiveRecording_Call {
	return &Client_LiveRecording_Call{Call: _e.mock.On("LiveRecording")}
}

func (_c *Client_LiveRecording_Call) Run(run func()) *Client_LiveRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_LiveRecording_Call) Return(liveRecording ari.LiveRecording) *Client_LiveRecording_Call {
	_c.Call.Return(liveRecording)
	return _c
}

func (_c *Client_LiveRecording_Call) RunAndReturn(run func() ari.LiveRecording) *Client_LiveRecording_Call {
	_c.Call.Return(run)
	return _c
}

// Mailbox provides a mock function for the type Client
func (_mock *Client) Mailbox() ari.Mailbox {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Mailbox")
	}

	var r0 ari.Mailbox
	if returnFunc, ok := ret.Get(0).(func() ari.Mailbox); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Mailbox)
		}
	}
	return r0
}

// Client_Mailbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mailbox'
type Client_Mailbox_Call struct {
	*mock.Call
}

// Mailbox is a helper method to define mock.On call
func (_e *Client_Expecter) Mailbox() *Client_Mailbox_Call {
	return &Client_Mailbox_Call{Call: _e.mock.On("Mailbox")}
}

func (_c *Client_Mailbox_Call) Run(run func()) *Client_Mailbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Mailbox_Call) Return(mailbox ari.Mailbox) *Client_Mailbox_Call {
	_c.Call.Return(mailbox)
	return _c
}

func (_c *Client_Mailbox_Call) RunAndReturn(run func() ari.Mailbox) *Client_Mailbox_Call {
	_c.Call.Return(run)
	return _c
}

// Playback provides a mock function for the type Client
func (_mock *Client) Playback() ari.Playback {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Playback")
	}

	var r0 ari.Playback
	if returnFunc, ok := ret.Get(0).(func() ari.Playback); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Playback)
		}
	}
	return r0
}

// Client_Playback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Playback'
type Client_Playback_Call struct {
	*mock.Call
}

// Playback is a helper method to define mock.On call
func (_e *Client_Expecter) Playback() *Client_Playback_Call {
	return &Client_Playback_Call{Call: _e.mock.On("Playback")}
}

func (_c *Client_Playback_Call) Run(run func()) *Client_Playback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Playback_Call) Return(playback ari.Playback) *Client_Playback_Call {
	_c.Call.Return(playback)
	return _c
}

func (_c *Client_Playback_Call) RunAndReturn(run func() ari.Playback) *Client_Playback_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function for the type Client
func (_mock *Client) SetLogger(logger *slog.Logger) {
	_mock.Called(logger)
	return
}

// Client_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type Client_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - logger *slog.Logger
func (_e *Client_Expecter) SetLogger(logger interface{}) *Client_SetLogger_Call {
	return &Client_SetLogger_Call{Call: _e.mock.On("SetLogger", logger)}
}

func (_c *Client_SetLogger_Call) Run(run func(logger *slog.Logger)) *Client_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *slog.Logger
		if args[0] != nil {
			arg0 = args[0].(*slog.Logger)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Client_SetLogger_Call) Return() *Client_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *Client_SetLogger_Call) RunAndReturn(run func(logger *slog.Logger)) *Client_SetLogger_Call {
	_c.Run(run)
	return _c
}

// Sound provides a mock function for the type Client
func (_mock *Client) Sound() ari.Sound {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sound")
	}

	var r0 ari.Sound
	if returnFunc, ok := ret.Get(0).(func() ari.Sound); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Sound)
		}
	}
	return r0
}

// Client_Sound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sound'
type Client_Sound_Call struct {
	*mock.Call
}

// Sound is a helper method to define mock.On call
func (_e *Client_Expecter) Sound() *Client_Sound_Call {
	return &Client_Sound_Call{Call: _e.mock.On("Sound")}
}

func (_c *Client_Sound_Call) Run(run func()) *Client_Sound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Sound_Call) Return(sound ari.Sound) *Client_Sound_Call {
	_c.Call.Return(sound)
	return _c
}

func (_c *Client_Sound_Call) RunAndReturn(run func() ari.Sound) *Client_Sound_Call {
	_c.Call.Return(run)
	return _c
}

// StoredRecording provides a mock function for the type Client
func (_mock *Client) StoredRecording() ari.StoredRecording {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StoredRecording")
	}

	var r0 ari.StoredRecording
	if returnFunc, ok := ret.Get(0).(func() ari.StoredRecording); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.StoredRecording)
		}
	}
	return r0
}

// Client_StoredRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoredRecording'
type Client_StoredRecording_Call struct {
	*mock.Call
}

// StoredRecording is a helper method to define mock.On call
func (_e *Client_Expecter) StoredRecording() *Client_StoredRecording_Call {
	return &Client_StoredRecording_Call{Call: _e.mock.On("StoredRecording")}
}

func (_c *Client_StoredRecording_Call) Run(run func()) *Client_StoredRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_StoredRecording_Call) Return(storedRecording ari.StoredRecording) *Client_StoredRecording_Call {
	_c.Call.Return(storedRecording)
	return _c
}

func (_c *Client_StoredRecording_Call) RunAndReturn(run func() ari.StoredRecording) *Client_StoredRecording_Call {
	_c.Call.Return(run)
	return _c
}

// TextMessage provides a mock function for the type Client
func (_mock *Client) TextMessage() ari.TextMessage {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TextMessage")
	}

	var r0 ari.TextMessage
	if returnFunc, ok := ret.Get(0).(func() ari.TextMessage); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.TextMessage)
		}
	}
	return r0
}

// Client_TextMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextMessage'
type Client_TextMessage_Call struct {
	*mock.Call
}

// TextMessage is a helper method to define mock.On call
func (_e *Client_Expecter) TextMessage() *Client_TextMessage_Call {
	return &Client_TextMessage_Call{Call: _e.mock.On("TextMessage")}
}

func (_c *Client_TextMessage_Call) Run(run func()) *Client_TextMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_TextMessage_Call) Return(textMessage ari.TextMessage) *Client_TextMessage_Call {
	_c.Call.Return(textMessage)
	return _c
}

func (_c *Client_TextMessage_Call) RunAndReturn(run func() ari.TextMessage) *Client_TextMessage_Call {
	_c.Call.Return(run)
	return _c
}
