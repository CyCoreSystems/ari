// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewSender creates a new instance of Sender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sender {
	mock := &Sender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Sender is an autogenerated mock type for the Sender type
type Sender struct {
	mock.Mock
}

type Sender_Expecter struct {
	mock *mock.Mock
}

func (_m *Sender) EXPECT() *Sender_Expecter {
	return &Sender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type Sender
func (_mock *Sender) Send(e ari.Event) {
	_mock.Called(e)
	return
}

// Sender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Sender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - e ari.Event
func (_e *Sender_Expecter) Send(e interface{}) *Sender_Send_Call {
	return &Sender_Send_Call{Call: _e.mock.On("Send", e)}
}

func (_c *Sender_Send_Call) Run(run func(e ari.Event)) *Sender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ari.Event
		if args[0] != nil {
			arg0 = args[0].(ari.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Sender_Send_Call) Return() *Sender_Send_Call {
	_c.Call.Return()
	return _c
}

func (_c *Sender_Send_Call) RunAndReturn(run func(e ari.Event)) *Sender_Send_Call {
	_c.Run(run)
	return _c
}
