// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package arimocks

import (
	"github.com/CyCoreSystems/ari/v6"
	mock "github.com/stretchr/testify/mock"
)

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

type Application_Expecter struct {
	mock *mock.Mock
}

func (_m *Application) EXPECT() *Application_Expecter {
	return &Application_Expecter{mock: &_m.Mock}
}

// Data provides a mock function for the type Application
func (_mock *Application) Data(key *ari.Key) (*ari.ApplicationData, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 *ari.ApplicationData
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) (*ari.ApplicationData, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.ApplicationData); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ApplicationData)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type Application_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Application_Expecter) Data(key interface{}) *Application_Data_Call {
	return &Application_Data_Call{Call: _e.mock.On("Data", key)}
}

func (_c *Application_Data_Call) Run(run func(key *ari.Key)) *Application_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Application_Data_Call) Return(applicationData *ari.ApplicationData, err error) *Application_Data_Call {
	_c.Call.Return(applicationData, err)
	return _c
}

func (_c *Application_Data_Call) RunAndReturn(run func(key *ari.Key) (*ari.ApplicationData, error)) *Application_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type Application
func (_mock *Application) Get(key *ari.Key) *ari.ApplicationHandle {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ari.ApplicationHandle
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) *ari.ApplicationHandle); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ApplicationHandle)
		}
	}
	return r0
}

// Application_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Application_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Application_Expecter) Get(key interface{}) *Application_Get_Call {
	return &Application_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Application_Get_Call) Run(run func(key *ari.Key)) *Application_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Application_Get_Call) Return(applicationHandle *ari.ApplicationHandle) *Application_Get_Call {
	_c.Call.Return(applicationHandle)
	return _c
}

func (_c *Application_Get_Call) RunAndReturn(run func(key *ari.Key) *ari.ApplicationHandle) *Application_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type Application
func (_mock *Application) List(key *ari.Key) ([]*ari.Key, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ari.Key
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) ([]*ari.Key, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(*ari.Key) []*ari.Key); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ari.Key)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*ari.Key) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Application_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Application_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - key *ari.Key
func (_e *Application_Expecter) List(key interface{}) *Application_List_Call {
	return &Application_List_Call{Call: _e.mock.On("List", key)}
}

func (_c *Application_List_Call) Run(run func(key *ari.Key)) *Application_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Application_List_Call) Return(keys []*ari.Key, err error) *Application_List_Call {
	_c.Call.Return(keys, err)
	return _c
}

func (_c *Application_List_Call) RunAndReturn(run func(key *ari.Key) ([]*ari.Key, error)) *Application_List_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type Application
func (_mock *Application) Subscribe(key *ari.Key, eventSource string) error {
	ret := _mock.Called(key, eventSource)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, eventSource)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Application_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Application_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - key *ari.Key
//   - eventSource string
func (_e *Application_Expecter) Subscribe(key interface{}, eventSource interface{}) *Application_Subscribe_Call {
	return &Application_Subscribe_Call{Call: _e.mock.On("Subscribe", key, eventSource)}
}

func (_c *Application_Subscribe_Call) Run(run func(key *ari.Key, eventSource string)) *Application_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Application_Subscribe_Call) Return(err error) *Application_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Application_Subscribe_Call) RunAndReturn(run func(key *ari.Key, eventSource string) error) *Application_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type Application
func (_mock *Application) Unsubscribe(key *ari.Key, eventSource string) error {
	ret := _mock.Called(key, eventSource)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ari.Key, string) error); ok {
		r0 = returnFunc(key, eventSource)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Application_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type Application_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - key *ari.Key
//   - eventSource string
func (_e *Application_Expecter) Unsubscribe(key interface{}, eventSource interface{}) *Application_Unsubscribe_Call {
	return &Application_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", key, eventSource)}
}

func (_c *Application_Unsubscribe_Call) Run(run func(key *ari.Key, eventSource string)) *Application_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ari.Key
		if args[0] != nil {
			arg0 = args[0].(*ari.Key)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Application_Unsubscribe_Call) Return(err error) *Application_Unsubscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Application_Unsubscribe_Call) RunAndReturn(run func(key *ari.Key, eventSource string) error) *Application_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}
