// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/CyCoreSystems/ari (interfaces: Subscription)

package mock

import (
	ari "github.com/CyCoreSystems/ari"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Subscription interface
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *_MockSubscriptionRecorder
}

// Recorder for MockSubscription (not exported)
type _MockSubscriptionRecorder struct {
	mock *MockSubscription
}

func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &_MockSubscriptionRecorder{mock}
	return mock
}

func (_m *MockSubscription) EXPECT() *_MockSubscriptionRecorder {
	return _m.recorder
}

func (_m *MockSubscription) Cancel() {
	_m.ctrl.Call(_m, "Cancel")
}

func (_mr *_MockSubscriptionRecorder) Cancel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel")
}

func (_m *MockSubscription) Events() chan ari.Event {
	ret := _m.ctrl.Call(_m, "Events")
	ret0, _ := ret[0].(chan ari.Event)
	return ret0
}

func (_mr *_MockSubscriptionRecorder) Events() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Events")
}
