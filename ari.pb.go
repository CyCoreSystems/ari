// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.2
// source: ari.proto

package ari

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Key identifies a unique resource in the system
type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind indicates the type of resource the Key points to.  e.g., "channel",
	// "bridge", etc.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// ID indicates the unique identifier of the resource
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Node indicates the unique identifier of the Asterisk node on which the
	// resource exists or will be created
	Node string `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	// Dialog indicates a named scope of the resource, for receiving events
	Dialog string `protobuf:"bytes,4,opt,name=dialog,proto3" json:"dialog,omitempty"`
	// App indiciates the ARI application that this key is bound to.
	App string `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ari_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_ari_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_ari_proto_rawDescGZIP(), []int{0}
}

func (x *Key) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Key) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Key) GetDialog() string {
	if x != nil {
		return x.Dialog
	}
	return ""
}

func (x *Key) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

// CallerID describes the name and number which identifies the caller to other endpoints
type CallerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the party
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number is the number of the party
	Number string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *CallerID) Reset() {
	*x = CallerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ari_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallerID) ProtoMessage() {}

func (x *CallerID) ProtoReflect() protoreflect.Message {
	mi := &file_ari_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallerID.ProtoReflect.Descriptor instead.
func (*CallerID) Descriptor() ([]byte, []int) {
	return file_ari_proto_rawDescGZIP(), []int{1}
}

func (x *CallerID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallerID) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

// ChannelData describes the data for a specific channel
type ChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the key of the channel
	Key *Key `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Id is the unique ID for this channel (AMI-style)
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the name of this channel (tect/name-id)
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// State is the current state of the channel
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// Accountcode is the account code assigned to the channel
	Accountcode string `protobuf:"bytes,5,opt,name=accountcode,proto3" json:"accountcode,omitempty"`
	// Caller is the callerID of the calling endpoint
	Caller *CallerID `protobuf:"bytes,6,opt,name=caller,proto3" json:"caller,omitempty"`
	// Connected is the callerID of the connected line, if applicable
	Connected *CallerID `protobuf:"bytes,7,opt,name=connected,proto3" json:"connected,omitempty"`
	// Creationtime is the time at which the channel was created
	Creationtime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=creationtime,proto3" json:"creationtime,omitempty"`
	// Dialplan is the current location of the channel in the dialplan
	Dialplan *DialplanCEP `protobuf:"bytes,9,opt,name=dialplan,proto3" json:"dialplan,omitempty"`
	// Language is the default spoken language for this channel
	Language string `protobuf:"bytes,10,opt,name=language,proto3" json:"language,omitempty"`
	// ChannelVars is the list of channel variables set on this channel
	ChannelVars map[string]string `protobuf:"bytes,11,rep,name=channel_vars,json=channelVars,proto3" json:"channel_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelData) Reset() {
	*x = ChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ari_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelData) ProtoMessage() {}

func (x *ChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_ari_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelData.ProtoReflect.Descriptor instead.
func (*ChannelData) Descriptor() ([]byte, []int) {
	return file_ari_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelData) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ChannelData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ChannelData) GetAccountcode() string {
	if x != nil {
		return x.Accountcode
	}
	return ""
}

func (x *ChannelData) GetCaller() *CallerID {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *ChannelData) GetConnected() *CallerID {
	if x != nil {
		return x.Connected
	}
	return nil
}

func (x *ChannelData) GetCreationtime() *timestamppb.Timestamp {
	if x != nil {
		return x.Creationtime
	}
	return nil
}

func (x *ChannelData) GetDialplan() *DialplanCEP {
	if x != nil {
		return x.Dialplan
	}
	return nil
}

func (x *ChannelData) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ChannelData) GetChannelVars() map[string]string {
	if x != nil {
		return x.ChannelVars
	}
	return nil
}

// Dialplan describes a location in the Asterisk dialplan
type DialplanCEP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context describes the section in the dialplan
	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// Exten describes the label in the section of the dialplan
	Exten string `protobuf:"bytes,2,opt,name=exten,proto3" json:"exten,omitempty"`
	// Priority indicates the index at the label in the section of the dialplan
	Priority int64 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *DialplanCEP) Reset() {
	*x = DialplanCEP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ari_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialplanCEP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialplanCEP) ProtoMessage() {}

func (x *DialplanCEP) ProtoReflect() protoreflect.Message {
	mi := &file_ari_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialplanCEP.ProtoReflect.Descriptor instead.
func (*DialplanCEP) Descriptor() ([]byte, []int) {
	return file_ari_proto_rawDescGZIP(), []int{3}
}

func (x *DialplanCEP) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *DialplanCEP) GetExten() string {
	if x != nil {
		return x.Exten
	}
	return ""
}

func (x *DialplanCEP) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

var File_ari_proto protoreflect.FileDescriptor

var file_ari_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x72, 0x69,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x67, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x36, 0x0a, 0x08, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xe9, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x61, 0x72, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x72, 0x69,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x72, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x72, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x43,
	0x45, 0x50, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x72, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x3e,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59,
	0x0a, 0x0b, 0x44, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x43, 0x45, 0x50, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x1b, 0x5a, 0x19, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6f, 0x6c, 0x79, 0x41, 0x49, 0x2d, 0x4c,
	0x44, 0x4e, 0x2f, 0x61, 0x72, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ari_proto_rawDescOnce sync.Once
	file_ari_proto_rawDescData = file_ari_proto_rawDesc
)

func file_ari_proto_rawDescGZIP() []byte {
	file_ari_proto_rawDescOnce.Do(func() {
		file_ari_proto_rawDescData = protoimpl.X.CompressGZIP(file_ari_proto_rawDescData)
	})
	return file_ari_proto_rawDescData
}

var file_ari_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ari_proto_goTypes = []interface{}{
	(*Key)(nil),                   // 0: ari.Key
	(*CallerID)(nil),              // 1: ari.CallerID
	(*ChannelData)(nil),           // 2: ari.ChannelData
	(*DialplanCEP)(nil),           // 3: ari.DialplanCEP
	nil,                           // 4: ari.ChannelData.ChannelVarsEntry
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_ari_proto_depIdxs = []int32{
	0, // 0: ari.ChannelData.key:type_name -> ari.Key
	1, // 1: ari.ChannelData.caller:type_name -> ari.CallerID
	1, // 2: ari.ChannelData.connected:type_name -> ari.CallerID
	5, // 3: ari.ChannelData.creationtime:type_name -> google.protobuf.Timestamp
	3, // 4: ari.ChannelData.dialplan:type_name -> ari.DialplanCEP
	4, // 5: ari.ChannelData.channel_vars:type_name -> ari.ChannelData.ChannelVarsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ari_proto_init() }
func file_ari_proto_init() {
	if File_ari_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ari_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ari_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ari_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ari_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialplanCEP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ari_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ari_proto_goTypes,
		DependencyIndexes: file_ari_proto_depIdxs,
		MessageInfos:      file_ari_proto_msgTypes,
	}.Build()
	File_ari_proto = out.File
	file_ari_proto_rawDesc = nil
	file_ari_proto_goTypes = nil
	file_ari_proto_depIdxs = nil
}
